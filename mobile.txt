==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\.gitignore ====
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\App.js ====
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import AppNavigator from './navigation/AppNavigator';
import { SafeAreaProvider } from 'react-native-safe-area-context';

const App = () => {
  return (
    <SafeAreaProvider>
      
        <AppNavigator />
    </SafeAreaProvider>
  );
};

export default App;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\app.json ====
{
  "expo": {
    "name": "bus-booking-mobile",
    "slug": "bus-booking-mobile",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.azatb.busbookingmobile",
      "infoPlist": {
        "ITSAppUsesNonExemptEncryption": false
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "favicon": "./assets/favicon.png"
    },
    "extra": {
      "eas": {
        "projectId": "9122dcae-331b-4904-aa3d-736ea97f62a4"
      }
    }
  }
}



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\eas.json ====
{
  "cli": {
    "version": ">= 16.1.0",
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\i18n.js ====
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import * as Localization from 'react-native-localize';

// Импорт локальных JSON файлов
import en from './locales/en.json';
import ru from './locales/ru.json';
import kk from './locales/kk.json';

// Определение языка устройства
const locales = Localization.getLocales();
const deviceLanguage = locales.length ? locales[0].languageCode : 'en';

i18n
  .use(initReactI18next)
  .init({
    fallbackLng: 'en',
    lng: deviceLanguage,
    resources: {
      en: { translation: en },
      ru: { translation: ru },
      kk: { translation: kk },
    },
    interpolation: {
      escapeValue: false,
    },
  });

export default i18n;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\index.js ====
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\package-lock.json ====
{
  "name": "bus-booking-mobile",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "bus-booking-mobile",
      "version": "1.0.0",
      "license": "0BSD",
      "dependencies": {
        "@expo/metro-runtime": "~4.0.1",
        "@expo/vector-icons": "^14.0.2",
        "@react-native-async-storage/async-storage": "1.23.1",
        "@react-native-community/datetimepicker": "8.2.0",
        "@react-native-picker/picker": "2.9.0",
        "@react-navigation/native": "^7.0.19",
        "@react-navigation/native-stack": "^7.3.3",
        "axios": "^1.8.4",
        "expo": "~52.0.41",
        "expo-auth-session": "~6.0.3",
        "expo-crypto": "~14.0.2",
        "expo-file-system": "^18.0.12",
        "expo-media-library": "~17.0.6",
        "expo-sharing": "~13.0.1",
        "expo-status-bar": "~2.0.1",
        "i18next": "^24.2.3",
        "i18next-browser-languagedetector": "^8.0.4",
        "i18next-http-backend": "^3.0.2",
        "jspdf": "^3.0.1",
        "jspdf-autotable": "^5.0.2",
        "moment": "^2.30.1",
        "moti": "^0.30.0",
        "qrcode": "^1.5.4",
        "react": "18.3.1",
        "react-i18next": "^15.4.1",
        "react-icons": "^5.5.0",
        "react-native": "0.76.7",
        "react-native-animatable": "^1.4.0",
        "react-native-calendars": "^1.1310.0",
        "react-native-dropdown-picker": "^5.4.6",
        "react-native-gesture-handler": "~2.20.2",
        "react-native-html-to-pdf": "^0.12.0",
        "react-native-localize": "^3.4.1",
        "react-native-modal": "^14.0.0-rc.1",
        "react-native-paper": "^5.13.1",
        "react-native-razorpay": "^2.3.0",
        "react-native-reanimated": "~3.16.1",
        "react-native-safe-area-context": "4.12.0",
        "react-native-screens": "~4.4.0",
        "react-native-vector-icons": "^10.2.0",
        "react-native-web": "~0.19.13",
        "react-native-webview": "13.12.5",
        "tailwind-rn": "^4.2.0"
      },
      "devDependencies": {
        "@babel/core": "^7.20.0",
        "tailwindcss": "^3.0.23"
      }
    },




==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\components\BackButton.jsx ====
import React from "react";
import { Text, TouchableOpacity, StyleSheet } from "react-native";
import { useNavigation } from "@react-navigation/native";

const BackButton = ({ onPress }) => {
  const navigator = useNavigation();

  return (
    <TouchableOpacity style={styles.backButton} onPress={() => navigator.goBack()}>
      <Text style={styles.backButtonText}>←</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  backButton: {
    alignSelf: "flex-start",
  },
  backButtonText: {
    color: "#693BB8",
    fontSize: 36,
    fontWeight: "700",
  },
});

export default BackButton;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\components\BusCard.js ====



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\navigation\AppNavigator.js ====



import React from 'react';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { NavigationContainer } from '@react-navigation/native';

import SplashScreen from '../screens/SplashScreen';
import WelcomeScreen from '../screens/WelcomeScreen';
import LoginScreen from '../screens/login/LoginScreen';
import SignupScreen from '../screens/signup/SignupScreen';
import HomeScreen from '../screens/home/HomeScreen';
import SearchResultScreen from '../screens/SearchResultScreen';
import BusDetailScreen from '../screens/busDetail/BusDetailScreen';
import SeatSelectionScreen from '../screens/SeatSelectionScreen';
import PassengerDetailsScreen from '../screens/PassengerDetailsScreen.js';
import PaymentScreen from '../screens/PaymentScreen';
import BookingPaymentScreen from '../screens/BookingPaymentScreen';
import MyBookingsScreen from '../screens/MyBookingsScreen.js';
import ProfileScreen from '../screens/ProfileScreen.js';
const Stack = createNativeStackNavigator();

const AppNavigator = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }} >
        <Stack.Screen name="Welcome" component={WelcomeScreen} />
        <Stack.Screen name="Login" component={LoginScreen} />
        <Stack.Screen name="Signup" component={SignupScreen} />
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="SearchResult" component={SearchResultScreen} />
        <Stack.Screen name="BusDetail" component={BusDetailScreen} />
        <Stack.Screen name="SeatSelection" component={SeatSelectionScreen} />
        <Stack.Screen name="BookingSummary" component={BookingPaymentScreen} />
        {/*<Stack.Screen name="PassengerDetails" component={PassengerDetailsScreen} />*/}
        <Stack.Screen name="Payment" component={PaymentScreen} />
        <Stack.Screen name="MyBookings" component={MyBookingsScreen} />
        <Stack.Screen name="Profile" component={ProfileScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default AppNavigator;


==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\BookingPaymentScreen.jsx ====
import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
  ScrollView,
  ActivityIndicator,
  Alert,
} from "react-native";
import { WebView } from "react-native-webview";
import { useNavigation, useRoute } from "@react-navigation/native";
import Modal from "react-native-modal";
import Icon from "react-native-vector-icons/Feather";
import AsyncStorage from "@react-native-async-storage/async-storage";

import { axiosInst } from "../service/axiosInstance"; // Ваш Axios инстанс
import logo from "../assets/logo.png";
import { SafeAreaView } from "react-native-safe-area-context";

export default function BookingPaymentScreen() {
  const navigation = useNavigation();
  const route = useRoute();

  // Параметры, переданные с предыдущего экрана
  const {
    busId,
    userId,
    selectedSeats = [],
    passengerDetails = [],
    price = 600,
    busNo = "AB123",
  } = route.params || {};

  const totalAmount = selectedSeats.length * price;

  const [menuVisible, setMenuVisible] = useState(false);
  const [step, setStep] = useState("SUMMARY");
  const [checkoutUrl, setCheckoutUrl] = useState("");
  const [loadingPayment, setLoadingPayment] = useState(false);

  // 1) Создаём Checkout Session на сервере
  const handleProceedToPayment = async () => {
    setLoadingPayment(true);
    try {
      const token = await AsyncStorage.getItem("jwtToken");
      const payload = {
        busId,
        userId,
        amount: totalAmount,
        seatNos: selectedSeats,
      };
      const resp = await axiosInst.post("/payment/stripe", payload, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (resp.data?.checkoutUrl) {
        setCheckoutUrl(resp.data.checkoutUrl);
        setStep("PAYMENT");
      } else {
        Alert.alert("Ошибка", "Не удалось создать платежную сессию");
      }
    } catch (error) {
      console.error("Ошибка handleProceedToPayment:", error);
      Alert.alert("Ошибка", "Платеж не инициализирован");
    }
    setLoadingPayment(false);
  };

  // 2) Следим за переходом внутри WebView
  const handleNavChange = async (navState) => {
    const { url } = navState;
    // Допустим, вы указали .setSuccessUrl("https://myapp.com/payment-success")
    // и .setCancelUrl("https://myapp.com/payment-cancel")
    if (url.includes("success")) {
      console.log("Успех", "Платёж прошёл, сохраняем бронь...");
      await confirmStripeBooking();
    } else if (url.includes("payment-cancel")) {
      Alert.alert("Отмена", "Оплата отменена");
      setStep("SUMMARY");
    }
  };

  // 3) Сохраняем бронь через /payment/stripe-verify
  const confirmStripeBooking = async () => {
    try {
      const token = await AsyncStorage.getItem("jwtToken");

      const seatPassengerList = passengerDetails.map((p) => ({
        seatNo: p.seatNumber,
        passenger: {
          firstName: p.firstName,
          lastName: p.lastName,
          gender: p.gender,
          age: p.age,
        },
      }));

      // Если хотите полностью совпадать с Razorpay: paymentId, razorpayOrderId, razorpaySignature
      // будут пустые
      const bookingsDto = {
        paymentId: "",
        razorpayOrderId: "",
        razorpaySignature: "",
        busId: busId,
        userId: await AsyncStorage.getItem("userId"),
        fare: totalAmount,
        seatPassengerList,
      };

      const resp = await axiosInst.post("/payment/stripe-verify", bookingsDto, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (resp.data.success) {
        Alert.alert("Успешно", "Бронь сохранена! ID: " + resp.data.id);
        navigation.navigate("MyBookings");
      } else {
        Alert.alert("Ошибка", resp.data.message || "Бронь не сохранена");
        setStep("SUMMARY");
      }
    } catch (error) {
      console.error("Ошибка confirmStripeBooking:", error);
      Alert.alert("Ошибка", "Не удалось сохранить бронь");
      setStep("SUMMARY");
    }
  };

  // Рендер экрана «Сводка»
  const renderSummary = () => (
    <View style={styles.summarySection}>
      <Text style={styles.sectionTitle}>Сводка бронирования</Text>
      <View style={styles.card}>
        <View style={styles.row}>
          <Text style={styles.label}>Автобус:</Text>
          <Text style={styles.value}>{busNo}</Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.label}>Места:</Text>
          <Text style={styles.value}>{selectedSeats.join(", ")}</Text>
        </View>
        <View style={[styles.row, { marginTop: 20 }]}>
          <Text style={[styles.label, styles.totalLabel]}>Итого:</Text>
          <Text style={styles.totalValue}>{totalAmount} KZT</Text>
        </View>
        <Text style={styles.perSeat}>Цена за место: {price} KZT</Text>
      </View>

      <TouchableOpacity
        style={styles.continueBtn}
        onPress={handleProceedToPayment}
        disabled={loadingPayment}
      >
        {loadingPayment ? (
          <ActivityIndicator color="#fff" />
        ) : (
          <Text style={styles.continueBtnText}>Перейти к оплате</Text>
        )}
      </TouchableOpacity>
    </View>
  );

  // Рендер экрана «Оплата»
  const renderPayment = () => (
    <View style={styles.paymentSection}>
      <Text style={styles.sectionTitle}>Оплата</Text>
      <View style={styles.paymentCard}>
        <Text style={styles.paymentLabel}>К оплате:</Text>
        <Text style={styles.paymentAmount}>{totalAmount} KZT</Text>
        <Text style={styles.paymentNote}>
          Завершите оплату через Stripe Checkout.
        </Text>
      </View>

      {checkoutUrl ? (
        <WebView
          source={{ uri: checkoutUrl }}
          startInLoadingState
          style={styles.webView}
          onNavigationStateChange={handleNavChange}
        />
      ) : (
        <ActivityIndicator size="large" color="#6C2BD9" />
      )}

      <TouchableOpacity style={styles.goBackBtn} onPress={() => setStep("SUMMARY")}>
        <Text style={styles.goBackBtnText}>← Назад к сводке</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <SafeAreaView>
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
            <Text style={styles.backButtonText}>←</Text>
          </TouchableOpacity>
          <Image source={logo} style={styles.logo} />
          <TouchableOpacity onPress={() => setMenuVisible(true)}>
            <Icon name="menu" size={44} color="#6B21A8" />
          </TouchableOpacity>
        </View>

        <Modal
          isVisible={menuVisible}
          onBackdropPress={() => setMenuVisible(false)}
          animationIn="slideInRight"
          animationOut="slideOutRight"
          backdropOpacity={0.3}
          style={{ margin: 0, justifyContent: "flex-start", alignItems: "flex-end" }}
        >
          <View style={styles.sideMenu}>
            <TouchableOpacity
              onPress={() => {
                setMenuVisible(false);
                navigation.navigate("Profile");
              }}
              style={{ paddingVertical: 12 }}
            >
              <Text style={{ fontSize: 18, color: "#111" }}>👤 Профиль</Text>
            </TouchableOpacity>
            <TouchableOpacity
              onPress={() => {
                setMenuVisible(false);
                navigation.navigate("MyBookings");
              }}
              style={{ paddingVertical: 12 }}
            >
              <Text style={{ fontSize: 18, color: "#111" }}>🎟 Мои билеты</Text>
            </TouchableOpacity>
            <TouchableOpacity
              onPress={() => setMenuVisible(false)}
              style={{ paddingVertical: 12 }}
            >
              <Text style={{ fontSize: 18, color: "red" }}>❌ Закрыть</Text>
            </TouchableOpacity>
          </View>
        </Modal>

        <Text style={styles.screenTitle}>Бронирование и оплата</Text>
        {step === "SUMMARY" ? renderSummary() : renderPayment()}
      </SafeAreaView>
    </ScrollView>
  );
}

// Стили:
const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    backgroundColor: "#fafafa",
    paddingHorizontal: 24,
    paddingTop: 20,
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingHorizontal: 20,
    marginBottom: 10,
  },
  backButton: { marginRight: 10 },
  backButtonText: { color: "#693BB8", fontSize: 36 },
  logo: { width: 150, height: 50, resizeMode: "contain" },
  screenTitle: {
    fontSize: 22, fontWeight: "700",
    marginTop: 10, marginBottom: 20,
    textAlign: "center", color: "#333",
  },
  sectionTitle: {
    fontSize: 18, fontWeight: "700",
    marginBottom: 15, textAlign: "center",
    color: "#333",
  },
  summarySection: { marginVertical: 20 },
  card: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    elevation: 2,
  },
  row: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 12,
  },
  label: { fontSize: 16, color: "#555" },
  value: { fontSize: 16, color: "#222", fontWeight: "500" },
  totalLabel: { fontSize: 18, fontWeight: "600" },
  totalValue: { fontSize: 18, fontWeight: "700", color: "#6C2BD9" },
  perSeat: {
    marginTop: 10, fontSize: 14,
    textAlign: "right", color: "#888",
  },
  continueBtn: {
    backgroundColor: "#6C2BD9",
    borderRadius: 28,
    paddingVertical: 14,
    alignItems: "center",
  },
  continueBtnText: { color: "#fff", fontSize: 16, fontWeight: "600" },
  paymentSection: { marginVertical: 20, flex: 1 },
  paymentCard: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    elevation: 2,
  },
  paymentLabel: { fontSize: 16, color: "#555", marginBottom: 4 },
  paymentAmount: { fontSize: 22, fontWeight: "700", color: "#6C2BD9" },
  paymentNote: { fontSize: 14, color: "#888", marginTop: 10 },
  webView: {
    height: 400,
    borderRadius: 16,
    overflow: "hidden",
    marginBottom: 20,
  },
  goBackBtn: {
    backgroundColor: "#ddd",
    borderRadius: 28,
    paddingVertical: 10,
    alignItems: "center",
  },
  goBackBtnText: { color: "#333", fontSize: 14 },
  sideMenu: {
    width: 250,
    height: "100%",
    backgroundColor: "#fff",
    paddingTop: 60,
    paddingHorizontal: 20,
    borderTopLeftRadius: 20,
    borderBottomLeftRadius: 20,
    shadowColor: "#000",
    shadowOffset: { width: -4, height: 0 },
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 8,
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\MyBookingsScreen.js ====
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
  FlatList,
  ScrollView,
  Alert,
  Image,
  Platform
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useNavigation } from "@react-navigation/native";
import { axiosInst } from "../service/axiosInstance";
import AsyncStorage from "@react-native-async-storage/async-storage";
import Modal from "react-native-modal";
import Icon from 'react-native-vector-icons/Feather';
import QRCode from 'qrcode';
import {autoTable} from'jspdf-autotable';
import jsPDF from 'jspdf';
import * as FileSystem from 'expo-file-system';
import * as MediaLibrary from 'expo-media-library';
import * as Sharing from 'expo-sharing';
import RNHTMLtoPDF from 'react-native-html-to-pdf';


// Функция для форматирования времени (часы:минуты)
const formatDateTime = (dateTimeString) => {
  const date = new Date(dateTimeString);
  const day = date.getDate().toString().padStart(2, "0");
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const hours = date.getHours().toString().padStart(2, "0");
  const minutes = date.getMinutes().toString().padStart(2, "0");
  return `${day}/${month} ${hours}:${minutes}`;
};

// Функция для форматирования даты (ГГГГ-ММ-ДД)
const formatDate = (dateString) => {
  const dateObj = new Date(dateString);
  const year = dateObj.getFullYear();
  const month = String(dateObj.getMonth() + 1).padStart(2, "0");
  const day = String(dateObj.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
};

const MyBookingsScreen = () => {
  const navigation = useNavigation();

  const [menuVisible, setMenuVisible] = useState(false);
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);

  // При монтировании компонента получаем токен и id текущего пользователя,
  // затем загружаем бронирования с бэкенда
  useEffect(() => {
    const fetchBookings = async () => {
      try {
        const token = await AsyncStorage.getItem("jwtToken");
        const storedId = await AsyncStorage.getItem("userId");
        if (!token) {
          // Если токена нет, перенаправляем на экран логина
          navigation.navigate("Login");
          return;
        }
        // Получаем бронирования пользователя
        const res = await axiosInst.get(`/bookings/getbookings/${storedId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setBookings(res.data);
      } catch (error) {
        console.log("Error fetching bookings:", error);
        Alert.alert("Ошибка", "Не удалось загрузить бронирования");
      } finally {
        setLoading(false);
      }
    };

    fetchBookings();
  }, [navigation]);

  // Функция для "скачивания" билета. Здесь можно интегрировать генерацию PDF или печать


const downloadTicketBeta = async (ticket) => {
  try {
    

    const qrValue = `Booking ID: ${ticket.id}\nBus: ${ticket.busNo}\nFrom: ${ticket.from} at ${ticket.startTime}\nTo: ${ticket.to} at ${ticket.endTime}`;

      const htmlContent = `
        <html>
          <head>
            <style>
              body { font-family: Arial; padding: 20px; }
              h1 { color: #51259B; text-align: center; }
              .qr { text-align: center; margin: 20px; }
              table { width: 100%; border-collapse: collapse; margin-top: 20px; }
              td, th { border: 1px solid #ccc; padding: 8px; text-align: left; }
            </style>
          </head>
          <body>
            <h1>Dimash Bus Ticket</h1>
            <p><strong>Bus:</strong> ${ticket.busNo}</p>
            <p><strong>Route:</strong> ${ticket.from} → ${ticket.to}</p>
            <p><strong>Date:</strong> ${ticket.date}</p>
            <p><strong>Time:</strong> ${ticket.startTime} - ${ticket.endTime}</p>
            <p><strong>Seats:</strong> ${ticket.selectedSeats.join(', ')}</p>
            <p><strong>Total:</strong> ${ticket.selectedSeats.length * ticket.price} KZT</p>
            <div class="qr">
              <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(qrValue)}" />
            </div>
            <h3>Terms and Conditions</h3>
            <ul>
              <li>Arrive 30 minutes before departure.</li>
              <li>No refunds after booking.</li>
              <li>Keep your belongings safe.</li>
            </ul>
          </body>
        </html>
      `;

      const file = await RNHTMLtoPDF.convert({
        html: htmlContent,
        fileName: `ticket_${ticket.id}`,
        base64: false,
      });

      if (file.filePath) {
        await Sharing.shareAsync(file.filePath);
      }
    } catch (err) {
      console.error(err);
      Alert.alert('Ошибка', 'Не удалось сгенерировать билет.');
    }
};

const formatDate = (dateStr) => {
  return new Date(dateStr).toLocaleDateString();
};

const formatDateTime = (dateStr) => {
  return new Date(dateStr).toLocaleString();
};




  // Рендер одной карточки бронирования
  const renderItem = ({ item }) => (
    <View style={styles.bookingCard}>
      <Text style={styles.busNo}>Автобус: {item.busNo}</Text>
      <View style={styles.infoRow}>
        <Text style={styles.infoLabel}>Откуда:</Text>
        <Text style={styles.infoValue}>
          {item.from} ({formatDateTime(item.startTime)})
        </Text>
      </View>
      <View style={styles.infoRow}>
        <Text style={styles.infoLabel}>Куда:</Text>
        <Text style={styles.infoValue}>
          {item.to} ({formatDateTime(item.endTime)})
        </Text>
      </View>
      <View style={styles.infoRow}>
        <Text style={styles.infoLabel}>Дата бронирования:</Text>
        <Text style={styles.infoValue}>{formatDate(item.bookingDateTime)}</Text>
      </View>
      <View style={styles.infoRow}>
        <Text style={styles.infoLabel}>Тариф:</Text>
        <Text style={styles.infoValue}>{item.totalFare} KZT</Text>
      </View>
      <TouchableOpacity
        style={styles.downloadBtn}
        onPress={() => downloadTicket(item)}
      >
        <Text style={styles.downloadBtnText}>Скачать билет</Text>
      </TouchableOpacity>
    </View>
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#6C2BD9" />
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
         <View style={{
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'space-between',
            paddingHorizontal: 20,
            marginBottom: 10,
          }}>
            <Image
              source={require('../assets/logo.png')}
              style={{ width: 160, height: 60, resizeMode: 'contain' }}
            />
            <TouchableOpacity onPress={() => setMenuVisible(true)}>
              <Icon name="menu" size={50} color="#6B21A8" />
            </TouchableOpacity>
          </View>
    
          <Modal
            isVisible={menuVisible}
            onBackdropPress={() => setMenuVisible(false)}
            animationIn="slideInRight"
            animationOut="slideOutRight"
            backdropOpacity={0.3}
            style={{ margin: 0, justifyContent: 'flex-start', alignItems: 'flex-end' }}
          >
            <View style={{
              width: 250,
              height: '100%',
              backgroundColor: '#fff',
              paddingTop: 60,
              paddingHorizontal: 20,
              borderTopLeftRadius: 20,
              borderBottomLeftRadius: 20,
              shadowColor: "#000",
              shadowOffset: { width: -4, height: 0 },
              shadowOpacity: 0.15,
              shadowRadius: 8,
              elevation: 8,
            }}>
              <TouchableOpacity
                onPress={() => { setMenuVisible(false); navigation.navigate("Profile"); }}
                style={{ paddingVertical: 12 }}
              >
                <Text style={{ fontSize: 18, color: '#111' }}>👤 Профиль</Text>
              </TouchableOpacity>
    
              <TouchableOpacity
                onPress={() => { setMenuVisible(false); navigation.navigate("MyBookings"); }}
                style={{ paddingVertical: 12 }}
              >
                <Text style={{ fontSize: 18, color: '#111' }}>🎟 Менің билеттерім</Text>
              </TouchableOpacity>
    
              <TouchableOpacity
                onPress={() => setMenuVisible(false)}
                style={{ paddingVertical: 12 }}
              >
                <Text style={{ fontSize: 18, color: 'red' }}>❌ Жабу</Text>
              </TouchableOpacity>
            </View>
          </Modal>
        
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        
        {bookings.length === 0 ? (
          <Text style={styles.noBookingsText}>Нет бронирований</Text>
        ) : (
          <FlatList
            data={bookings.slice().reverse()}
            renderItem={renderItem}
            keyExtractor={(item) => item.id.toString()}
            contentContainerStyle={styles.list}
          />
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fafafa",
  },
  scrollContainer: {
    padding: 24,
    paddingBottom: 40,
  },
  title: {
    fontSize: 24,
    fontWeight: "700",
    color: "#333",
    textAlign: "center",
    marginBottom: 20,
  },
  noBookingsText: {
    fontSize: 18,
    color: "#888",
    textAlign: "center",
    marginTop: 20,
  },
  bookingCard: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    // Тень для iOS
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 3 },
    // Тень для Android
    elevation: 3,
  },
  busNo: {
    fontSize: 18,
    fontWeight: "700",
    marginBottom: 10,
    color: "#6C2BD9",
  },
  infoRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 6,
  },
  infoLabel: {
    fontSize: 16,
    color: "#555",
  },
  infoValue: {
    fontSize: 16,
    color: "#222",
    fontWeight: "500",
  },
  downloadBtn: {
    backgroundColor: "#6C2BD9",
    borderRadius: 28,
    paddingVertical: 10,
    alignItems: "center",
    marginTop: 15,
  },
  downloadBtnText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
  list: {
    paddingBottom: 20,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});


export async function downloadTicket(item) {
  try {
    const response = await axiosInst.get(`/bookings/getbooking/${item.id}`);
    const ticketDetails = response.data;

    console.log("Билетті жүктеу:", ticketDetails);
    // 2) Создаём объект jsPDF
    const doc = new jsPDF();

    // Пример: встраиваем TTF, если нужно
    const amiriFont = "AAEAAAASAQAABAAgAAA";
  
    // Set font styles
    doc.addFileToVFS("Amiri-Regular.ttf", amiriFont);
    doc.addFont("Amiri-Regular.ttf", "Amiri", "normal");
    doc.setFont("Amiri");

    // Задаём фон (просто белый)
    doc.setFillColor('#ffffff');
    doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, 'F');

    doc.setFontSize(8);
    doc.text("This PDF is generated by Dimash Bus System 2024", 10, 10);

    // Если нужно вставлять картинку-логотип (base64):
    // doc.addImage(logoDataUrl, 'PNG', 10, 15, 40, 40);

    // Крупный заголовок
    doc.setFontSize(24);
    doc.setTextColor('#333');
    doc.text("Dimash Bus", doc.internal.pageSize.width / 2, 30, { align: 'center' });

    // Рисуем прямоугольник (рамку) – опционально
    doc.setDrawColor('#333');
    doc.setLineWidth(0.5);
    doc.rect(5, 15, doc.internal.pageSize.width - 10, doc.internal.pageSize.height - 25);

    // 3) Генерируем QR-код (base64)
    const qrText = `Брондау ID: ${item.id}\nАвтобус №: ${ticketDetails.busNo}\nҚайдан: ${ticketDetails.from} ${formatDateTime(ticketDetails.startTime)}\nБрондау күні: ${formatDate(ticketDetails.bookingDateTime)}`;
    // qrDataUrl – base64-строка "data:image/png;base64,..."

    // Добавляем QR-код на PDF

    // Текст "Билет туралы мәлімет"
    doc.setFontSize(16);
    doc.setTextColor('#333');
    doc.text(`Билет туралы мәлімет - Брондау ID ${item.id}`, 20, 70);

    doc.setFontSize(12);
    doc.text(`Автобус №: ${ticketDetails.busNo}`, 20, 90);
    doc.text(`Қайдан: ${ticketDetails.from} - ${formatDateTime(ticketDetails.startTime)}`, 20, 105);
    doc.text(`Қайда: ${ticketDetails.to} - ${formatDateTime(ticketDetails.endTime)}`, 20, 120);
    doc.text(`Брондау күні: ${formatDate(ticketDetails.bookingDateTime)}`, 20, 135);

    // Кол-во пассажиров
    const totalPassengers = ticketDetails.seatPassengerList.length;
    doc.text(`Жолаушылар саны: ${totalPassengers}`, 20, 150);

    // 4) Таблица пассажиров (jspdf-autotable)
    const startY = 170;
    const passengerTable = ticketDetails.seatPassengerList.map((p, index) => [
      index + 1,
      p.seatNo,
      `${p.passenger.firstName} ${p.passenger.lastName}`,
      p.passenger.gender,
      p.passenger.age
    ]);

    autoTable(doc, {
      startY,
      head: [['#', 'Орын', 'Аты', 'Жыныс', 'Жасы']],
      body: passengerTable,
      margin: { top: 10 },
      styles: { font: "Amiri", fontStyle: 'normal', fontSize: 10 }
      // Если нужны переносы, надо следить за overflow
    });

    // 5) Шарттар мен ережелер
    let afterTableY = doc.lastAutoTable.finalY + 10;
    doc.setFontSize(10);
    doc.setTextColor('#666');
    const termsAndConditions = `Шарттар мен ережелер:
1. Жөнелту уақытынан 30 минут бұрын келуіңіз сұралады.
2. Брондаудан кейін қайтару немесе бас тарту мүмкін емес.
3. Сапар барысында жолаушылар өз мүліктеріне жауапты.`;
    doc.text(termsAndConditions, 20, afterTableY);

    // 6) Генерируем base64 PDF
    // doc.save(...) в RN не сохранит файл на диск
    // Нужно manual: datauristring → записать → share
    const pdfBase64 = doc.output('datauristring'); 
    // вернёт "data:application/pdf;base64,JVBERi0xLj..."

    // Отделяем base64
    const base64Data = pdfBase64.split(',')[1];

    // 7) Пишем во временную директорию
    const fileName = `Dimash_Bus_${item.id}.pdf`;
    const filePath = `${FileSystem.cacheDirectory}${fileName}`;

    await FileSystem.writeAsStringAsync(filePath, base64Data, {
      encoding: FileSystem.EncodingType.Base64,
    });

    // 8) Шарим через expo-sharing
    const canShare = await Sharing.isAvailableAsync();
    if (canShare) {
      await Sharing.shareAsync(filePath);
    } else {
      Alert.alert('PDF сгенерирован', `Сохранён: ${filePath}`);
    }

  } catch (error) {
    console.error("Билетті жүктеу кезінде қате:", error);
    Alert.alert("Қате", "Құжатты қалыптастыруда қате орын алды. Қайта көріңіз.");
  }
}
export default MyBookingsScreen;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\PassengerDetailsScreen.js ====



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\PaymentScreen.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';

const PaymentScreen = () => {
  const navigation = useNavigation();
  const route = useRoute();

  const { totalAmount } = route.params;

  return (
    <View style={styles.container}>
      <TouchableOpacity onPress={() => navigation.goBack()}>
        <Text style={styles.back}>←</Text>
      </TouchableOpacity>

      <Text style={styles.title}>Payment</Text>

      <View style={styles.summaryCard}>
        <Text style={styles.label}>Total Payment:</Text>
        <Text style={styles.amount}>{totalAmount} KZT</Text>
        <Text style={styles.note}>please select one of the payment method below</Text>
      </View>

      <Text style={styles.paymentLabel}>Payment Method</Text>

      {/* Credit Card */}
      <TouchableOpacity style={styles.paymentOption}>
        <View style={styles.row}>
          <Text style={styles.paymentTitle}>Credit Card</Text>
          <Text style={styles.select}>SELECT</Text>
        </View>
        <View style={styles.iconsRow}>
          <Image source={require('../assets/mastercard.png')} style={styles.icon} />
          <Image source={require('../assets/amex.png')} style={styles.icon} />
          <Image source={require('../assets/visa.png')} style={styles.icon} />
        </View>
      </TouchableOpacity>

      {/* Bank Transfer */}
      <TouchableOpacity style={styles.paymentOption}>
        <View style={styles.row}>
          <Text style={styles.paymentTitle}>Bank Transfer</Text>
          <Text style={styles.select}>SELECT</Text>
        </View>
        <View style={styles.iconsRow}>
          <Image source={require('../assets/googlepay.png')} style={styles.icon} />
          <Image source={require('../assets/card.png')} style={styles.icon} />
        </View>
      </TouchableOpacity>
    </View>
  );
};

export default PaymentScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    backgroundColor: '#f5f5f5',
  },
  back: {
    fontSize: 20,
    color: '#6C2BD9',
  },
  title: {
    fontSize: 22,
    fontWeight: '700',
    marginTop: 20,
    marginBottom: 30,
  },
  summaryCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    color: '#555',
    marginBottom: 4,
  },
  amount: {
    fontSize: 22,
    fontWeight: '700',
    color: '#6C2BD9',
  },
  note: {
    fontSize: 14,
    color: '#888',
    marginTop: 10,
  },
  paymentLabel: {
    fontSize: 18,
    fontWeight: '600',
    marginVertical: 10,
  },
  paymentOption: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  paymentTitle: {
    fontSize: 16,
    fontWeight: '500',
  },
  select: {
    color: '#6C2BD9',
    fontWeight: '600',
  },
  iconsRow: {
    flexDirection: 'row',
    marginTop: 12,
  },
  icon: {
    width: 40,
    height: 28,
    marginRight: 12,
    resizeMode: 'contain',
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\ProfileScreen.js ====
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
  ScrollView,
  Alert,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useNavigation } from "@react-navigation/native";
import { axiosInst } from "../service/axiosInstance";
import AsyncStorage from "@react-native-async-storage/async-storage";

const ProfileScreen = () => {
  const navigation = useNavigation();
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const token = await AsyncStorage.getItem("jwtToken");
        const storedId = await AsyncStorage.getItem("id");
        // Если токен или id отсутствуют, перенаправляем на экран входа
        if (!token || !storedId) {
          navigation.navigate("Login");
          return;
        }
        // Запрос на получение профиля
        const res = await axiosInst.get(`/user/${storedId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setProfile(res.data);
      } catch (error) {
        console.log("Ошибка получения профиля:", error);
        Alert.alert("Ошибка", "Не удалось загрузить профиль");
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, [navigation]);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#6C2BD9" />
      </View>
    );
  }

  if (!profile) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>Профиль не найден</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <Text style={styles.title}>Профиль</Text>
        <View style={styles.profileCard}>
          <Text style={styles.label}>Имя:</Text>
          <Text style={styles.value}>{profile.firstName}</Text>
        </View>
        <View style={styles.profileCard}>
          <Text style={styles.label}>Фамилия:</Text>
          <Text style={styles.value}>{profile.lastName}</Text>
        </View>
        <View style={styles.profileCard}>
          <Text style={styles.label}>Email:</Text>
          <Text style={styles.value}>{profile.email}</Text>
        </View>
        <View style={styles.profileCard}>
          <Text style={styles.label}>Телефон:</Text>
          <Text style={styles.value}>{profile.mobile}</Text>
        </View>
        <View style={styles.profileCard}>
          <Text style={styles.label}>Возраст:</Text>
          <Text style={styles.value}>{profile.age}</Text>
        </View>
        <View style={styles.profileCard}>
          <Text style={styles.label}>Пол:</Text>
          <Text style={styles.value}>{profile.gender}</Text>
        </View>
        <TouchableOpacity
          style={styles.editButton}
          onPress={() => navigation.navigate("EditProfile", { profile })}
        >
          <Text style={styles.editButtonText}>Редактировать профиль</Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fafafa",
  },
  scrollContainer: {
    padding: 24,
    paddingBottom: 40,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  title: {
    fontSize: 24,
    fontWeight: "700",
    color: "#333",
    textAlign: "center",
    marginBottom: 20,
  },
  profileCard: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    shadowColor: "#000",
    shadowOpacity: 0.07,
    shadowOffset: { width: 0, height: 3 },
    elevation: 2,
  },
  label: {
    fontSize: 16,
    color: "#555",
    fontWeight: "600",
  },
  value: {
    fontSize: 16,
    color: "#222",
    fontWeight: "500",
    marginTop: 4,
  },
  editButton: {
    backgroundColor: "#6C2BD9",
    borderRadius: 28,
    paddingVertical: 14,
    alignItems: "center",
    marginTop: 20,
  },
  editButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
  errorText: {
    fontSize: 18,
    color: "#888",
    textAlign: "center",
    marginTop: 20,
  },
});

export default ProfileScreen;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\SearchResultScreen.js ====
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  Image,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
} from "react-native";
import { useNavigation, useRoute } from "@react-navigation/native";
import { axiosInst } from "../service/axiosInstance";

const DashedLine = () => (
  <View style={styles.dashedLineContainer}>
    <View style={styles.dashedLine} />
  </View>
);

const LocationSelector = ({ label, location }) => (
  <View style={styles.locationSelectorContainer}>
    <Text style={styles.locationLabel}>{label}</Text>
    <Text style={styles.locationText}>{location}</Text>
  </View>
);

const DateSeatSelector = ({ date, seats }) => (
  <View style={styles.dateSeatContainer}>
    <View style={styles.dateContainer}>
      <Text style={styles.dateText}>{date}</Text>
    </View>
    <View style={styles.seatsContainer}>
      <Text style={styles.seatsText}>{seats} орын</Text>
    </View>
  </View>
);

// Функция форматирования времени
const formatTime = (time) => {
  const date = new Date(time);
  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false });
};

const RouteCard = ({ bus, passengers, onBook }) => (
  <View style={[styles.routeCardContainer, bus.availableSeats > 0 ? styles.activeContainer : styles.inactiveContainer]}>
    <Text style={[styles.busId, bus.availableSeats > 0 ? styles.activeBusId : styles.inactiveBusId]}>{bus.busNo}</Text>

    <View style={styles.timeLocationRow}>
      <Text style={styles.timeText}>{formatTime(bus.startTime)}</Text>
      <DashedLine />
      <Text style={styles.locationText}>Қайдан {bus.from}</Text>
    </View>

    <View style={styles.timeLocationRow}>
      <Text style={styles.timeText}>{formatTime(bus.endTime)}</Text>
      <DashedLine />
      <Text style={styles.locationText}>Қайда {bus.to}</Text>
    </View>

    <View style={styles.footer}>
      <Text style={[styles.priceText, bus.availableSeats > 0 ? styles.activePriceText : styles.inactivePriceText]}>
        {bus.cost} KZT
      </Text>
      <TouchableOpacity
        style={[styles.bookButton, bus.availableSeats > 0 ? styles.activeBookButton : styles.inactiveBookButton]}
        onPress={() => onBook(bus)}
        disabled={bus.availableSeats <= 0}
      >
        <Text style={styles.bookButtonText}>Брондау</Text>
      </TouchableOpacity>
    </View>
  </View>
);

export default function BusTicketingScreen() {
  const navigation = useNavigation();
  const route = useRoute();
  const { from, to, date, passengers } = route.params;
  const [stationList, setStationList] = useState([]);

  const [buses, setBuses] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchStations();
    fetchBuses();
  }, []);

  const fetchBuses = async () => {
    setLoading(true);
    try {
      const response = await axiosInst.post("/bus/getbuses", { from, to, date });
      setBuses(response.data);
    } catch (error) {
      console.error("Error fetching buses:", error);
      Alert.alert("Error", "Failed to fetch buses");
    } finally {
      setLoading(false);
    }
  };

  const handleBookNow = (bus) => {
    
    navigation.navigate("BusDetail", {
      id: bus.id,
      
      busNo: bus.busNo,
      from: bus.from,
      to: bus.to,
      fromTime: bus.startTime,
      toTime: bus.endTime,
      date,
      passengers,
      price: bus.cost,
      availableSeats: bus.availableSeats,
      
    });
  };

  const fetchStations = async () => {
    try {
      const response = await axiosInst.get("/station/getstations");
      const formattedStations = response.data.map((station) => ({
        label: station.station_name,
        value: station.id.toString(),
      }));
      setStationList(formattedStations);
    } catch (error) {
      console.error("Error fetching stations:", error);
      Alert.alert("Error", "Failed to fetch stations.");
    }
  };

  const getStationName = (id) => {
    const station = stationList.find((station) => station.value === id);
    return station ? station.label : '';
  };

  return (
    <ScrollView style={styles.mainContainer}>
      <View style={styles.content}>
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
            <Text style={styles.backButtonText}>←</Text>
          </TouchableOpacity>
          <Image
            source={require("../assets/logo.png")}
            style={styles.logo}
          />
        </View>

        <View style={styles.locationContainer}>
          <LocationSelector label="Қайдан" location={getStationName(from)} />
          <LocationSelector label="Қайда" location={getStationName(to)} />
        </View>

        <DateSeatSelector date={date} seats={passengers} />

        {loading ? (
          <ActivityIndicator size="large" color="#51259B" style={{ marginTop: 40 }} />
        ) : buses.length === 0 ? (
          <Text style={styles.noBusesText}>No buses found</Text>
        ) : (
          buses.map((bus) => (
            <RouteCard key={bus.id} bus={bus} passengers={passengers} onBook={handleBookNow} />
          ))
        )}
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  mainContainer: { flex: 1, backgroundColor: "#EBEAEA" },
  content: { padding: 16 },
  header: { flexDirection: "row", alignItems: "center", marginTop: 32 },
  backButton: { marginRight: 10 },
  backButtonText: { color: "#693BB8", fontSize: 36 },
  logo: { width: 200, height: 60, resizeMode: "contain" },
  locationContainer: { flexDirection: "row", gap: 16, marginTop: 24 },
  locationSelectorContainer: { flex: 1, backgroundColor: "#FAFAFA", borderRadius: 14, padding: 8 },
  locationLabel: { fontSize: 18, fontWeight: "600", color: "#837F7F" },
  locationText: { fontSize: 20, fontWeight: "300", marginTop: 4 },
  dateSeatContainer: { flexDirection: "row", gap: 16, marginTop: 16 },
  dateContainer: { flex: 1, backgroundColor: "#FAFAFA", borderRadius: 17, padding: 8 },
  seatsContainer: { backgroundColor: "#FAFAFA", borderRadius: 17, padding: 8 },
  dateText: { fontSize: 18, fontWeight: "300" },
  seatsText: { color: "#6C6A6A", fontSize: 18, fontWeight: "600" },
  routeCardContainer: { marginTop: 16, borderRadius: 20, padding: 24 },
  activeContainer: { backgroundColor: "#FFFBFB" },
  inactiveContainer: { backgroundColor: "#F8F5F5" },
  busId: { fontSize: 22, fontWeight: "700" },
  activeBusId: { color: "#693BB8" },
  inactiveBusId: { color: "#7C7575" },
  timeLocationRow: { flexDirection: "row", marginTop: 16 },
  timeText: { fontSize: 20, fontWeight: "600", width: 90 },
  footer: { borderTopWidth: 1, borderColor: "#C6BCBC", marginTop: 16, paddingTop: 16, flexDirection: "row", justifyContent: "space-between", alignItems: "center" },
  priceText: { fontSize: 25, fontWeight: "700" },
  activePriceText: { color: "#693BB8" },
  inactivePriceText: { color: "#7C7575" },
  bookButton: { paddingHorizontal: 16, paddingVertical: 8, borderRadius: 15 },
  activeBookButton: { backgroundColor: "#51259B" },
  inactiveBookButton: { backgroundColor: "#B8B5BC" },
  bookButtonText: { color: "#fff", fontSize: 16, fontWeight: "700" },
  dashedLineContainer: { marginHorizontal: 16, height: 57, justifyContent: "center" },
  dashedLine: { height: "100%", width: 1, borderWidth: 1, borderStyle: "dashed", borderColor: "#000" },
  noBusesText: { fontSize: 18, color: "#E74C3C", textAlign: "center", marginTop: 40 },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\SeatSelectionScreen.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';

const totalSeats = 20;
const reservedSeats = [1, 5, 12, 15];

const SeatSelectionScreen = () => {
  const navigation = useNavigation();
  const route = useRoute();

  const { price, passengers } = route.params;

  const [selectedSeats, setSelectedSeats] = useState([]);

  const toggleSeat = (seatNumber) => {
    if (reservedSeats.includes(seatNumber)) return;

    if (selectedSeats.includes(seatNumber)) {
      setSelectedSeats(selectedSeats.filter((n) => n !== seatNumber));
    } else {
      if (selectedSeats.length < passengers) {
        setSelectedSeats([...selectedSeats, seatNumber]);
      }
    }
  };

  const getSeatStatus = (seatNumber) => {
    if (reservedSeats.includes(seatNumber)) return 'reserved';
    if (selectedSeats.includes(seatNumber)) return 'selected';
    return 'available';
  };

  const handleBook = () => {
    navigation.navigate('BookingSummary', {
      ...route.params,
      selectedSeats,
    });
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <TouchableOpacity onPress={() => navigation.goBack()}>
        <Text style={styles.back}>←</Text>
      </TouchableOpacity>

      <Text style={styles.title}>Choose Seat</Text>

      {/* Сетка мест */}
      <View style={styles.seatGrid}>
        {Array.from({ length: totalSeats }).map((_, index) => {
          const seatNumber = index + 1;
          const status = getSeatStatus(seatNumber);

          return (
            <TouchableOpacity
              key={seatNumber}
              style={[
                styles.seat,
                status === 'reserved' && styles.reserved,
                status === 'available' && styles.available,
                status === 'selected' && styles.selected,
              ]}
              onPress={() => toggleSeat(seatNumber)}
              disabled={status === 'reserved'}
            />
          );
        })}
      </View>

      {/* Легенда */}
      <View style={styles.legend}>
        <View style={styles.legendItem}>
          <View style={[styles.circle, styles.reserved]} />
          <Text>Reserved</Text>
        </View>
        <View style={styles.legendItem}>
          <View style={[styles.circle, styles.available]} />
          <Text>Available</Text>
        </View>
        <View style={styles.legendItem}>
          <View style={[styles.circle, styles.selected]} />
          <Text>Selected Seat</Text>
        </View>
      </View>

      <TouchableOpacity
        style={styles.bookBtn}
        onPress={handleBook}
        disabled={selectedSeats.length !== passengers}
      >
        <Text style={styles.bookBtnText}>Book Now</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

export default SeatSelectionScreen;

const styles = StyleSheet.create({
  container: {
    padding: 20,
    paddingBottom: 60,
    backgroundColor: '#fff',
    alignItems: 'center',
  },
  back: {
    alignSelf: 'flex-start',
    fontSize: 20,
    color: '#6C2BD9',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    marginVertical: 20,
  },
  seatGrid: {
    width: '100%',
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  seat: {
    width: '22%',
    aspectRatio: 1,
    borderRadius: 8,
    marginBottom: 16,
  },
  reserved: {
    backgroundColor: '#ccc',
  },
  available: {
    backgroundColor: '#eee',
  },
  selected: {
    backgroundColor: '#6C2BD9',
  },
  legend: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    marginTop: 24,
  },
  legendItem: {
    alignItems: 'center',
  },
  circle: {
    width: 20,
    height: 20,
    borderRadius: 10,
    marginBottom: 6,
  },
  bookBtn: {
    backgroundColor: '#6C2BD9',
    paddingHorizontal: 30,
    paddingVertical: 14,
    borderRadius: 30,
    marginTop: 30,
  },
  bookBtnText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\SplashScreen.js ====
import React, { useEffect } from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { useNavigation } from '@react-navigation/native';

const SplashScreen = () => {
  const navigation = useNavigation();

  useEffect(() => {
    const timer = setTimeout(() => {
      navigation.replace('Welcome');
    }, 2000);
    return () => clearTimeout(timer);
  }, []);

  return (
    <View style={styles.container}>
      <Image source={require('../assets/bus-icon.png')} style={styles.icon} />
      <Text style={styles.title}>Dimash Bus</Text>
      <TouchableOpacity
        style={styles.button}
        onPress={() => navigation.navigate('Welcome')}
      >
        <Text style={styles.buttonText}>Get Started</Text>
      </TouchableOpacity>
    </View>
  );
};

export default SplashScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#fff'
  },
  icon: {
    width: 50,
    height: 50,
    marginBottom: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 40,
  },
  button: {
    backgroundColor: '#5b21b6',
    paddingHorizontal: 40,
    paddingVertical: 12,
    borderRadius: 25,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\WelcomeScreen.js ====
import React from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { useNavigation } from '@react-navigation/native';

const WelcomeScreen = () => {
  const navigation = useNavigation();

  return (
    <View style={styles.container}>
      <Image source={require('../assets/logo.png')}  style={styles.icon} />
      
      <Text style={styles.welcome}>Welcome!</Text>
      <Text style={styles.description}>
        Dimash Bus is an online booking service for bus transportation.
      </Text>
      <View style={styles.buttonsContainer}>
        <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Login')}>
          <Text style={styles.buttonText}>LOGIN</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Signup')}>
          <Text style={styles.buttonText}>SIGNUP</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default WelcomeScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#fff', padding: 20
  },
  icon: {
    resizeMode : "contain",
    width: 300,
    height: 300,
    marginTop: 1,
  },
  title: {
    fontSize: 28,
    fontWeight: '600',
    marginTop: 10,
    marginBottom: 20,
  },
  image: {
    width: '100%',
    height: 200,
    resizeMode: 'contain',
    marginVertical: 20,
  },
  welcome: {
    fontSize: 24,
    fontWeight: '600',
  },
  description: {
    fontSize: 16,
    color: '#444',
    textAlign: 'center',
    marginTop: 10,
    marginBottom: 30,
  },
  buttonsContainer: {
    flexDirection: 'row',
    gap: 20,
  },
  button: {
    backgroundColor: '#5b21b6',
    paddingHorizontal: 30,
    paddingVertical: 12,
    borderRadius: 25,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\busDetail\BusDetailScreen.js ====
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  TextInput,
} from "react-native";
import { useNavigation, useRoute } from "@react-navigation/native";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { axiosInst } from "../../service/axiosInstance";

import busImage from "../../assets/bus9.png";
import logo from "../../assets/logo.png";
import { SafeAreaView } from "react-native-safe-area-context";

export default function BusDetailsScreen() {
  const navigation = useNavigation();
  const route = useRoute();

  // Из предыдущего экрана
  const {
    id,                   // ID автобуса
    passengers = 1,       // Сколько пассажиров максимум
    price = 500,          // Цена за 1 место, если нужно
  } = route.params || {};

  // Данные об автобусе
  const [busNo, setBusNo] = useState("");
  const [from, setFrom] = useState("");
  const [to, setTo] = useState("");
  const [startTime, setStartTime] = useState(null);
  const [endTime, setEndTime] = useState(null);
  const [date, setDate] = useState(""); 
  const [totalSeats, setTotalSeats] = useState(41);

  // Набор занятых (или временно заблокированных) мест
  const [bookedSeats, setBookedSeats] = useState([]);
  // Места, выбранные пользователем
  const [selectedSeats, setSelectedSeats] = useState([]);
  // Данные пассажиров для каждого выбранного места
  // [{ seatNumber, firstName, lastName, age, gender }, ... ]
  const [passengerDetails, setPassengerDetails] = useState([]);

  // --- Запрос: /seats/bus/:id ---
  const fetchBusById = async () => {
    try {
      const res = await axiosInst.get(`/seats/bus/${id}`);
      const data = res.data;
      setBusNo(data.busNo);
      setFrom(data.from);
      setTo(data.to);
      setStartTime(data.startTime);
      setEndTime(data.endTime);
      setTotalSeats(data.totalSeats || 41);
      setBookedSeats(data.bookedSeats || []);
      // Если нужно, можно вычислить date = data.startTime.split("T")[0], и т.п.
    } catch (error) {
      console.error("Error fetchBusById:", error);
      Alert.alert("Ошибка", "Не удалось получить детали автобуса");
    }
  };

  // --- Запрос: /seat/:id (получение временно заблокированных мест) ---
  const fetchSeatsSecondDb = async () => {
    try {
      const res = await axiosInst.get(`/seat/${id}`);
      // res.data = массив, например [11, 12]
      const concurrencySeats = res.data;
      // Объединяем с bookedSeats
      setBookedSeats((prev) => Array.from(new Set([...prev, ...concurrencySeats])));
    } catch (error) {
      console.error("Error fetchSeatsSecondDb:", error);
    }
  };

  // При монтировании
  useEffect(() => {
    fetchBusById();
    fetchSeatsSecondDb();
  }, []);

  // Форматируем время (ч:м)
  const formatTime = (timeString) => {
    if (!timeString) return "";
    const d = new Date(timeString);
    return d.toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
    });
  };

  // --- Логика нажатия на место ---
  const handleSeatPress = (seatNumber) => {
    // Если уже занято => игнорируем
    if (bookedSeats.includes(seatNumber)) return;

    // Если оно уже выбрано => убираем из выбранных
    if (selectedSeats.includes(seatNumber)) {
      setSelectedSeats((prev) => prev.filter((s) => s !== seatNumber));
      // Удаляем из passengerDetails
      setPassengerDetails((prev) => prev.filter((p) => p.seatNumber !== seatNumber));
    } else {
      // Иначе проверим лимит (passengers)
      if (selectedSeats.length < passengers) {
        setSelectedSeats((prev) => [...prev, seatNumber]);
        // Создаём пустую запись для пассажира
        setPassengerDetails((prev) => [
          ...prev,
          {
            seatNumber,
            firstName: "",
            lastName: "",
            age: "",
            gender: "",
          },
        ]);
      } else {
        Alert.alert("Предупреждение", `Максимум ${passengers} мест.`);
      }
    }
  };

  // Изменение поля одного пассажира
  const updatePassengerField = (seatNumber, field, value) => {
    setPassengerDetails((prev) =>
      prev.map((p) =>
        p.seatNumber === seatNumber ? { ...p, [field]: value } : p
      )
    );
  };

  // Рендер одного «квадратика» кресла
  const renderSeat = (seatNumber) => {
    const isBooked = bookedSeats.includes(seatNumber);
    const isSelected = selectedSeats.includes(seatNumber);

    let bgColor = "#ccc"; 
    if (isBooked) {
      bgColor = "#e53935"; // красный
    } else if (isSelected) {
      bgColor = "#6C2BD9"; // фиолетовый
    }

    return (
      <TouchableOpacity
        key={seatNumber}
        style={[styles.seat, { backgroundColor: bgColor }]}
        onPress={() => handleSeatPress(seatNumber)}
        disabled={isBooked}
      >
        <MaterialCommunityIcons name="seat-outline" size={14} color="#fff" />
        <Text style={styles.seatNumber}>{seatNumber}</Text>
      </TouchableOpacity>
    );
  };

  // Формируем колонки: 1..10, 11..20, 21 alone, 22..31, 32..41
  const col1 = [];
  for (let i = 1; i <= 10; i++) col1.push(renderSeat(i));
  const col2 = [];
  for (let i = 11; i <= 20; i++) col2.push(renderSeat(i));
  const col3 = [renderSeat(21)]; // "одинокое" место
  const col4 = [];
  for (let i = 22; i <= 31; i++) col4.push(renderSeat(i));
  const col5 = [];
  for (let i = 32; i <= 41; i++) col5.push(renderSeat(i));

  // --- Кнопка "Брондау" ---
  const handleBook = () => {
    // Проверим заполненность формы пассажиров
    for (const passenger of passengerDetails) {
      if (!passenger.firstName || !passenger.lastName || !passenger.age) {
        Alert.alert("Ошибка", "Заполните все поля пассажиров (имя, фамилию, возраст).");
        return;
      }
    }
    // Всё ок
    navigation.navigate("BookingSummary", {
      busId:id,
      busNo,
      from,
      to,
      startTime,
      endTime,
      date,
      passengers,
      price,
      selectedSeats,
      passengerDetails,
    });
  };

  return (
    <SafeAreaView style={styles.rootContainer}>
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        {/* Шапка */}
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
            <Text style={styles.backButtonText}>←</Text>
          </TouchableOpacity>
          <Image source={logo} style={styles.logo} />
        </View>

        {/* Картинка автобуса */}
        <Image source={busImage} style={styles.busImage} />
        <Text style={styles.busNo}>{busNo}</Text>
        {date ? <Text style={styles.dateText}>{date}</Text> : null}

        {/* Инфа "откуда-куда" */}
        <View style={styles.routeBox}>
          <View style={styles.routeRow}>
            <Text style={styles.placeText}>{from}</Text>
            <Text style={styles.timeText}>{formatTime(startTime)}</Text>
          </View>
          <Text style={styles.arrow}>◉──────────◉</Text>
          <View style={styles.routeRow}>
            <Text style={styles.placeText}>{to}</Text>
            <Text style={styles.timeText}>{formatTime(endTime)}</Text>
          </View>
        </View>

        {/* Блок выбора мест */}
        <View style={styles.seatsBlock}>
          <Text style={styles.seatsBlockTitle}>Орын таңдаңыз</Text>
          <View style={styles.columnsWrapper}>
            <View style={styles.column}>{col1}</View>
            <View style={styles.column}>{col2}</View>
            <View style={styles.columnCenter}>{col3}</View>
            <View style={styles.column}>{col4}</View>
            <View style={styles.column}>{col5}</View>
          </View>

          {/* Легенда */}
          <View style={styles.legend}>
            <View style={styles.legendItem}>
              <View style={[styles.legendBox, { backgroundColor: "#ccc" }]} />
              <Text>Свободно</Text>
            </View>
            <View style={styles.legendItem}>
              <View style={[styles.legendBox, { backgroundColor: "#e53935" }]} />
              <Text>Занято</Text>
            </View>
            <View style={styles.legendItem}>
              <View style={[styles.legendBox, { backgroundColor: "#6C2BD9" }]} />
              <Text>Выбрано</Text>
            </View>
          </View>

          {/* Информация о выбранных местах */}
          {selectedSeats.length > 0 && (
            <View style={styles.selectedSeatsInfo}>
              <Text style={styles.infoText}>
                Места: {selectedSeats.join(", ")}
              </Text>
              <Text style={styles.infoText}>
                Сумма: {selectedSeats.length * price} KZT
              </Text>
            </View>
          )}
        </View>

        {/* Блок с формами для пассажиров */}
        {selectedSeats.length > 0 && (
          <View style={styles.passengerInfo}>
            <Text style={styles.passengerInfoTitle}>
              Данные пассажиров
            </Text>
            
            {passengerDetails.map((p) => (
              <View style={styles.passengerCard} key={p.seatNumber}>
                {/* Заголовок карточки */}
                <View style={styles.cardHeader}>
                  <Text style={styles.cardHeaderText}>
                    Место №{p.seatNumber}
                  </Text>
                </View>

                {/* Поля ввода: расположим в 2 ряда */}
                <View style={styles.inputRow}>
                  <TextInput
                    style={[styles.inputField, { flex: 1 }]}
                    placeholder="Имя"
                    value={p.firstName}
                    onChangeText={(val) =>
                      updatePassengerField(p.seatNumber, "firstName", val)
                    }
                  />
                  <View style={{ width: 12 }} />
                  <TextInput
                    style={[styles.inputField, { flex: 1 }]}
                    placeholder="Фамилия"
                    value={p.lastName}
                    onChangeText={(val) =>
                      updatePassengerField(p.seatNumber, "lastName", val)
                    }
                  />
                </View>

                <View style={styles.inputRow}>
                  <TextInput
                    style={[styles.inputField, { flex: 1 }]}
                    placeholder="Возраст"
                    keyboardType="numeric"
                    value={String(p.age)}
                    onChangeText={(val) =>
                      updatePassengerField(p.seatNumber, "age", val)
                    }
                  />
                  <View style={{ width: 12 }} />
                  <TextInput
                    style={[styles.inputField, { flex: 1 }]}
                    placeholder="Пол (M/F)"
                    value={p.gender}
                    onChangeText={(val) =>
                      updatePassengerField(p.seatNumber, "gender", val)
                    }
                  />
                </View>
              </View>
            ))}
          </View>
        )}


        {/* Кнопка "Брондау" */}
        <View style={styles.footer}>
          <TouchableOpacity style={styles.bookBtn} onPress={handleBook}>
            <Text style={styles.bookBtnText}>Брондау</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

// Стили оформления:
const styles = StyleSheet.create({
  rootContainer: {
    flex: 1,
    backgroundColor: "#fff",
  },
  scrollContainer: {
    padding: 20,
    paddingBottom: 60,
  },

  // Шапка
  header: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  backButton: {
    marginRight: 10,
  },
  backButtonText: {
    color: "#693BB8",
    fontSize: 36,
  },
  logo: {
    width: 150,
    height: 60,
    resizeMode: "contain",
  },

  // Картинка автобуса
  busImage: {
    width: "100%",
    height: 120,
    marginVertical: 10,
    resizeMode: "contain",
  },
  busNo: {
    fontSize: 18,
    fontWeight: "700",
    color: "#fff",
    backgroundColor: "#6C2BD9",
    paddingVertical: 6,
    textAlign: "center",
    borderRadius: 20,
    marginVertical: 4,
  },
  dateText: {
    textAlign: "center",
    color: "#888",
    fontSize: 14,
    marginBottom: 8,
  },

  // Блок инфы "откуда-куда"
  routeBox: {
    backgroundColor: "#f8f8f8",
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  routeRow: {
    alignItems: "center",
    marginBottom: 8,
  },
  placeText: {
    fontSize: 18,
    fontWeight: "600",
    color: "#6C2BD9",
  },
  timeText: {
    fontSize: 16,
    marginTop: 2,
    color: "#333",
  },
  arrow: {
    textAlign: "center",
    color: "#444",
    marginBottom: 8,
    fontSize: 20,
  },

  // Блок с местами
  seatsBlock: {
    backgroundColor: "#F8F8F8",
    borderRadius: 12,
    padding: 16,
  },
  seatsBlockTitle: {
    fontSize: 16,
    fontWeight: "700",
    marginBottom: 12,
  },
  columnsWrapper: {
    flexDirection: "row",
    justifyContent: "space-evenly",
  },
  column: {
    flexDirection: "column",
    alignItems: "center",
    marginHorizontal: 4,
  },
  columnCenter: {
    flexDirection: "column-reverse",
    alignItems: "center",
    marginHorizontal: 4,
  },
  seat: {
    width: 40,
    height: 40,
    borderRadius: 8,
    marginVertical: 6,
    justifyContent: "center",
    alignItems: "center",
  },
  seatNumber: {
    fontSize: 11,
    fontWeight: "700",
    color: "#fff",
    marginTop: 2,
  },

  legend: {
    marginTop: 16,
    marginBottom: 8,
  },
  legendItem: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 6,
  },
  legendBox: {
    width: 20,
    height: 20,
    borderRadius: 4,
    marginRight: 6,
  },

  selectedSeatsInfo: {
    marginTop: 8,
    backgroundColor: "#fff",
    padding: 10,
    borderRadius: 8,
  },
  infoText: {
    fontSize: 14,
    color: "#333",
  },

  // Блок "Информация о пассажирах"
  passengerInfo: {
    marginTop: 20,
    borderRadius: 10,
    backgroundColor: "#fff",
    padding: 16,
  },
  passengerInfoTitle: {
    fontSize: 18,
    fontWeight: "700",
    marginBottom: 12,
    color: "#333",
  },
  passengerCard: {
    backgroundColor: "#f9f9f9",
    borderRadius: 10,
    padding: 12,
    marginBottom: 16,

    // Для красоты можно добавить тень (только на iOS)
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    // Для Android тень через elevation
    elevation: 2,
  },
  passengerSeat: {
    fontWeight: "600",
    marginBottom: 6,
    color: "#333",
  },
  cardHeader: {
    marginBottom: 8,
    borderBottomWidth: 1,
    borderColor: "#ddd",
    paddingBottom: 4,
  },
  cardHeaderText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#51259B",
  },
  inputRow: {
    flexDirection: "row",
    marginTop: 10,
  },
  inputField: {
    backgroundColor: "#fff",
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    paddingHorizontal: 10,
    paddingVertical: 8,
    fontSize: 14,

    // Чтобы текст не налипал на верхний край
    // можно добавить textAlignVertical: "center"
    // но оно не всегда нужно
  },

  // Кнопка "Брондау"
  footer: {
    marginTop: 20,
    alignItems: "center",
  },
  bookBtn: {
    backgroundColor: "#6C2BD9",
    borderRadius: 30,
    paddingVertical: 12,
    paddingHorizontal: 40,
  },
  bookBtnText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\BottomNavigation.jsx ====
import React from "react";
import { View, Image, TouchableOpacity } from "react-native";
import styles from "./styles";

const BottomNavigation = () => {
  return (
    <View style={styles.bottomNav.container}>
      <View style={styles.bottomNav.content}>
        <TouchableOpacity>
          <Image
            source={{
              uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/1489f5ae25c528ba84289d797b44c042d25a9fbb",
            }}
            style={styles.bottomNav.icon}
            accessibilityLabel="Search icon"
          />
        </TouchableOpacity>
        <TouchableOpacity>
          <Image
            source={{
              uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/352c6bde25d6c653cae573f39d2ae9144c9ce3f2",
            }}
            style={styles.bottomNav.icon}
            accessibilityLabel="Menu icon"
          />
        </TouchableOpacity>
        <TouchableOpacity>
          <Image
            source={{
              uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/c145c251432e6a0e1effdab83bd93043b7f8f78e",
            }}
            style={styles.bottomNav.icon}
            accessibilityLabel="User icon"
          />
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default BottomNavigation;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\FormField.jsx ====
import React from "react";
import { View, Text, Image } from "react-native";
import styles from "./styles";

const FormField = ({ iconSource, iconAlt, label, value }) => {
  return (
    <View style={styles.formField.container}>
      <Image
        source={{ uri: iconSource }}
        style={styles.formField.icon}
        accessibilityLabel={iconAlt}
      />
      <View>
        <Text style={styles.formField.label}>{label}</Text>
        <Text style={styles.formField.value}>{value}</Text>
        <View style={styles.formField.separator} />
      </View>
    </View>
  );
};

export default FormField;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\HomeScreen.jsx ====
{/***

import { SafeAreaView } from 'react-native-safe-area-context';
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, TextInput, ActivityIndicator } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { axiosInst } from '../service/axiosInstance';
import DateTimePicker from '@react-native-community/datetimepicker';

const HomeScreen = () => {
  const navigation = useNavigation();

  const [stationList, setStationList] = useState([]);
  const [from, setFrom] = useState('');
  const [to, setTo] = useState('');
  const [date, setDate] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [passengers, setPassengers] = useState('1');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchStations();
  }, []);

  const fetchStations = async () => {
    try {
      const response = await axiosInst.get('/station/getstations');
      setStationList(response.data);
    } catch (error) {
      console.error('Error fetching stations:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = () => {
    if (!from || !to || !date || !passengers) {
      alert('Please fill all fields.');
      return;
    }

    navigation.navigate('SearchResult', {
      from,
      to,
      date: date.toISOString().split('T')[0],
      passengers,
    });
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#6B21A8" />
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
        <Text style={styles.welcome}>Hello,{"\n"}Where are you headed?</Text>

        <View style={styles.card}>
          <Text style={styles.label}>From</Text>
          <TextInput
            style={styles.input}
            placeholder="Departure Station"
            value={from}
            onChangeText={setFrom}
          />

          <Text style={styles.label}>To</Text>
          <TextInput
            style={styles.input}
            placeholder="Destination Station"
            value={to}
            onChangeText={setTo}
          />

          <Text style={styles.label}>Passengers</Text>
          <TextInput
            style={styles.input}
            placeholder="Number of Passengers"
            value={passengers}
            onChangeText={setPassengers}
            keyboardType="numeric"
          />

          <Text style={styles.label}>Date</Text>
          <TouchableOpacity style={styles.datePicker} onPress={() => setShowDatePicker(true)}>
            <Text>{date.toISOString().split('T')[0]}</Text>
          </TouchableOpacity>

          {showDatePicker && (
            <DateTimePicker
              value={date}
              mode="date"
              display="calendar"
              onChange={(event, selectedDate) => {
                setShowDatePicker(false);
                if (selectedDate) setDate(selectedDate);
              }}
            />
          )}
        </View>

        <TouchableOpacity style={styles.searchBtn} onPress={handleSearch}>
          <Text style={styles.searchText}>Search</Text>
        </TouchableOpacity>
      
    </SafeAreaView>
  );
};

export default HomeScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 50,
    backgroundColor: '#fff',
  },
  welcome: {
    fontSize: 22,
    fontWeight: '600',
    marginVertical: 20,
    color: '#333',
  },
  card: {
    backgroundColor: '#f8f8f8',
    padding: 16,
    borderRadius: 12,
    elevation: 2,
    marginTop: 10,
  },
  label: {
    fontWeight: '600',
    marginTop: 12,
    marginBottom: 6,
    color: '#6B21A8',
  },
  input: {
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  datePicker: {
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 14,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  searchBtn: {
    backgroundColor: '#6B21A8',
    marginTop: 20,
    paddingVertical: 14,
    borderRadius: 30,
    alignItems: 'center',
  },
  searchText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
});

***/}

{/*** 
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, TextInput, ActivityIndicator, Platform, Modal, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { axiosInst } from '../../service/axiosInstance';
import DateTimePicker from '@react-native-community/datetimepicker';
import { SafeAreaView } from 'react-native-safe-area-context';

const HomeScreen = () => {
  const navigation = useNavigation();

  const [stationList, setStationList] = useState([]);
  const [from, setFrom] = useState('');
  const [to, setTo] = useState('');
  const [date, setDate] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [passengers, setPassengers] = useState('1');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchStations();
  }, []);

  const fetchStations = async () => {
    try {
      const response = await axiosInst.get('/station/getstations');
      setStationList(response.data);
    } catch (error) {
      console.error('Error fetching stations:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = () => {
    if (!from || !to || !date || !passengers) {
      alert('Please fill all fields.');
      return;
    }

    navigation.navigate('SearchResult', {
      from,
      to,
      date: date.toISOString().split('T')[0],
      passengers,
    });
  };

  const onDateChange = (event, selectedDate) => {
    setShowDatePicker(Platform.OS === 'ios');
    if (selectedDate) {
      setDate(selectedDate);
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#6B21A8" />
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.welcome}>Hello,{"\n"}Where are you headed?</Text>

      <View style={styles.card}>
        <Text style={styles.label}>From</Text>
        <TextInput
          style={styles.input}
          placeholder="Departure Station"
          value={from}
          onChangeText={setFrom}
        />

        <Text style={styles.label}>To</Text>
        <TextInput
          style={styles.input}
          placeholder="Destination Station"
          value={to}
          onChangeText={setTo}
        />

        <Text style={styles.label}>Passengers</Text>
        <TextInput
          style={styles.input}
          placeholder="Number of Passengers"
          value={passengers}
          onChangeText={setPassengers}
          keyboardType="numeric"
        />

        <Text style={styles.label}>Date</Text>
        <TouchableOpacity style={styles.datePicker} onPress={() => setShowDatePicker(true)}>
          <Text>{date.toISOString().split('T')[0]}</Text>
        </TouchableOpacity>

        {showDatePicker && (
          <DateTimePicker
            value={date}
            mode="date"
            display={Platform.OS === 'ios' ? 'inline' : 'calendar'}
            onChange={onDateChange}
          />
        )}

        {Platform.OS === 'ios' && showDatePicker && (
          <Modal transparent={true}>
            <View style={styles.modalBackground}>
              <View style={styles.modalContainer}>
                <DateTimePicker
                  value={date}
                  mode="date"
                  display="inline"
                  onChange={onDateChange}
                />
                <Button title="Done" onPress={() => setShowDatePicker(false)} />
              </View>
            </View>
          </Modal>
        )}
      </View>

      <TouchableOpacity style={styles.searchBtn} onPress={handleSearch}>
        <Text style={styles.searchText}>Search</Text>
      </TouchableOpacity>
    </SafeAreaView>
  );
};

export default HomeScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 50,
    backgroundColor: '#fff',
  },
  welcome: {
    fontSize: 22,
    fontWeight: '600',
    marginVertical: 20,
    color: '#333',
  },
  card: {
    backgroundColor: '#f8f8f8',
    padding: 16,
    borderRadius: 12,
    elevation: 2,
    marginTop: 10,
  },
  label: {
    fontWeight: '600',
    marginTop: 12,
    marginBottom: 6,
    color: '#6B21A8',
  },
  input: {
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  datePicker: {
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 14,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  searchBtn: {
    backgroundColor: '#6B21A8',
    marginTop: 20,
    paddingVertical: 14,
    borderRadius: 30,
    alignItems: 'center',
  },
  searchText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  modalBackground: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
  },
  modalContainer: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    alignItems: 'center',
  },
});***/} 
import React, { useEffect, useState, useRef  } from "react";
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  RefreshControl,
  Alert,
  Platform,
  TextInput,
  Easing, Animated
} from "react-native";
import DateTimePicker from "@react-native-community/datetimepicker";
import DropDownPicker from "react-native-dropdown-picker";
import BottomNavigation from "./BottomNavigation";
import styles from "./styles";
import { axiosInst } from "../../service/axiosInstance";
import { useNavigation } from "@react-navigation/native";
import FormField from "./FormField";
import { SafeAreaView } from "react-native-safe-area-context";
import Modal from "react-native-modal";
import Icon from 'react-native-vector-icons/Feather';

const HomeScreen = () => {
  const navigation = useNavigation();
  const translateX = useRef(new Animated.Value(500)).current;

  const [stationList, setStationList] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [menuVisible, setMenuVisible] = useState(false);

  const [from, setFrom] = useState(null);
  const [to, setTo] = useState(null);
  const [date, setDate] = useState(new Date());
  const [passengers, setPassengers] = useState('1');

  const [openFrom, setOpenFrom] = useState(false);
  const [openTo, setOpenTo] = useState(false);

  const [showDatePicker, setShowDatePicker] = useState(false);

  useEffect(() => {
    Animated.timing(translateX, {
      toValue: 12,
      duration: 3000,
      easing: Easing.inOut(Easing.ease),
      useNativeDriver: true,
    }).start();
  }, []);

  
  const fetchStations = async () => {
    try {
      const response = await axiosInst.get("/station/getstations");
      const formattedStations = response.data.map((station) => ({
        label: station.station_name,
        value: station.id.toString(),
      }));
      setStationList(formattedStations);
    } catch (error) {
      console.error("Error fetching stations:", error);
      Alert.alert("Error", "Failed to fetch stations.");
    }
  };

  useEffect(() => {
    fetchStations();
  }, []);

  const onRefresh = async () => {
    setRefreshing(true);
    await fetchStations();
    setRefreshing(false);
  };

  const handleSearch = async () => {
    if (!from || !to || !date || !passengers) {
      Alert.alert("Error", "Please fill all fields.");
      return;
    }

    try {
      //Alert.alert("Info", `Searching for buses from ${from} to ${to} on ${date}`);

      const requestBody = {
        from,
        to,
        date: date.toISOString().split("T")[0],
      };
      const response = await axiosInst.post("/bus/getbuses", requestBody);

      if (response.data.length === 0) {
        Alert.alert("Info", "No buses found.");
      } else {
        navigation.navigate("SearchResult", {
          buses: response.data,
          from,
          to,
          date: requestBody.date,
          passengers,
        });
      }
    } catch (error) {
      console.error("Error fetching buses:", error);
      Alert.alert("Error", "Failed to fetch buses.");
    }
  };

  const onDateChange = (event, selectedDate) => {
    setShowDatePicker(Platform.OS === "ios");
    if (selectedDate) setDate(selectedDate);
  };

  return (
    <SafeAreaView style={styles.inputDesign.container}>

      <View style={{
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingHorizontal: 20,
        marginBottom: 10,
      }}>
        <Image
          source={require('../../assets/logo.png')}
          style={{ width: 160, height: 60, resizeMode: 'contain' }}
        />
        <TouchableOpacity onPress={() => setMenuVisible(true)}>
          <Icon name="menu" size={50} color="#6B21A8" />
        </TouchableOpacity>
      </View>

      <Modal
        isVisible={menuVisible}
        onBackdropPress={() => setMenuVisible(false)}
        animationIn="slideInRight"
        animationOut="slideOutRight"
        backdropOpacity={0.3}
        style={{ margin: 0, justifyContent: 'flex-start', alignItems: 'flex-end' }}
      >
        <View style={{
          width: 250,
          height: '100%',
          backgroundColor: '#fff',
          paddingTop: 60,
          paddingHorizontal: 20,
          borderTopLeftRadius: 20,
          borderBottomLeftRadius: 20,
          shadowColor: "#000",
          shadowOffset: { width: -4, height: 0 },
          shadowOpacity: 0.15,
          shadowRadius: 8,
          elevation: 8,
        }}>
          <TouchableOpacity
            onPress={() => { setMenuVisible(false); navigation.navigate("Profile"); }}
            style={{ paddingVertical: 12 }}
          >
            <Text style={{ fontSize: 18, color: '#111' }}>👤 Профиль</Text>
          </TouchableOpacity>

          <TouchableOpacity
            onPress={() => { setMenuVisible(false); navigation.navigate("MyBookings"); }}
            style={{ paddingVertical: 12 }}
          >
            <Text style={{ fontSize: 18, color: '#111' }}>🎟 Менің билеттерім</Text>
          </TouchableOpacity>

          <TouchableOpacity
            onPress={() => setMenuVisible(false)}
            style={{ paddingVertical: 12 }}
          >
            <Text style={{ fontSize: 18, color: 'red' }}>❌ Жабу</Text>
          </TouchableOpacity>
        </View>
      </Modal>



      <ScrollView
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        <View style={styles.inputDesign.contentContainer}>
        

          <Text style={styles.inputDesign.greeting}>
            Сәлем. Автобус іздеп жүрсіз бе?
          </Text>

          <Animated.Image
            source={require('../../assets/bus5.png')}
            style={[
              styles.inputDesign.busImage,
              { transform: [{ translateX }] }
            ]}
          />

        
          <View style={styles.inputDesign.formContainer}>
              
          <View style={styles.formField.container}>
            <Image
              source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/ee5bc20453cdd8e0519eae1058baa51f54c07cbe" }}
              style={styles.formField.icon}
              accessibilityLabel={"Location icon"}
            />
            <View>
              <Text style={styles.formField.label}>{"Қайдан"}</Text>
                <DropDownPicker
                open={openFrom}
                setOpen={setOpenFrom}
                items={stationList}
                value={from}
                setValue={setFrom}
                placeholder="From"
                zIndex={2000}
                style={styles.formField.value}
              />
              <View style={styles.formField.separator} />
            </View>
            </View> 



            <View style={styles.formField.container}>
            <Image
              source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/ee5bc20453cdd8e0519eae1058baa51f54c07cbe" }}
              style={styles.formField.icon}
              accessibilityLabel={"Select icon"}
            />
            <View>
              <Text style={styles.formField.label}>{"Қайда"}</Text>
              <DropDownPicker
              open={openTo}
              setOpen={setOpenTo}
              items={stationList.filter((item) => item.value !== from)}
              value={to}
              setValue={setTo}
              placeholder="To"
              zIndex={1000}
              style={{ marginBottom: 15 }}
            />

              <View style={styles.formField.separator} />
            </View>
            </View>
            
            <View style={styles.formField.container}>
              <Image
                source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/d987f8fb233906f224470ffb2d833bdbde0d4937" }}
                style={styles.formField.icon}
                accessibilityLabel={"Users icon"}
              />
              <View>
                <Text style={styles.formField.label}>{"Жолаушы саны"}</Text>
                <TextInput style={styles.formField.value}  onChangeText={setPassengers} value={passengers}>{''}</TextInput>
                <View style={styles.formField.separator} />
              </View>
            </View>

            <View style={styles.formField.container}>
              <Image
                source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/5569f14e094e429e15972615346e358ec68dad64" }}
                style={styles.formField.icon}
                accessibilityLabel={"Calendar icon"}
              />
              <View>
                <Text style={styles.formField.label}>{"Күн"}</Text>
                <DateTimePicker
                value={date}
                mode="date"
                display="default"
                onChange={onDateChange}
                style={styles.formField.value}
              />
                <View style={styles.formField.separator} />
              </View>
            </View>
            
           

            <TouchableOpacity
              style={styles.inputDesign.searchButton}
              onPress={handleSearch}
            >
              <Text style={styles.inputDesign.searchButtonText}>Search</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>

      
    </SafeAreaView>
  );
};

export default HomeScreen;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\SearchButton.jsx ====
import * as React from "react";
import { Text, TouchableOpacity, StyleSheet } from "react-native";

const SearchButton = () => {
  return (
    <TouchableOpacity style={styles.searchButton}>
      <Text style={styles.searchButtonText}>Search</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
    searchButton: {
      borderRadius: 126,
      marginTop: 18,
      width: 218,
      maxWidth: "100%",
      paddingLeft: 70,
      paddingRight: 70,
      paddingTop: 15,
      paddingBottom: 29,
      backgroundColor: "#007AFF", // Added background color for the button
    },
    searchButtonText: {
      fontFamily: "Nunito",
      fontSize: 24,
      color: "rgba(255, 255, 255, 1)",
      fontWeight: "600",
      textAlign: "center",
    },
  });

export default SearchButton;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\SearchForm.jsx ====
import * as React from "react";
import { View, StyleSheet } from "react-native";
import FormField from "./FormField";

const SearchForm = () => {
  return (
    <View style={styles.formContainer}>
      {/* From Field */}
      <FormField
        icon="https://cdn.builder.io/api/v1/image/assets/5ce1241109834c779f0eaf58b7b8f168/57c293f765cba9bdb381ef27296df51340eead40?placeholderIfAbsent=true"
        label="From"
        value="Алматы"
        type="from"
      />

      {/* To Field */}
      <FormField
        icon="https://cdn.builder.io/api/v1/image/assets/5ce1241109834c779f0eaf58b7b8f168/aa67d8b0d303bb8511b477c4b0ad95b6f3f0a0dc?placeholderIfAbsent=true"
        label="To"
        value="Каскелен"
        type="to"
        hasConnector={true}
      />

      {/* Passenger Field */}
      <FormField
        icon="https://cdn.builder.io/api/v1/image/assets/5ce1241109834c779f0eaf58b7b8f168/235f057519eaaef785513c0b353b55ecf8ba0bd0?placeholderIfAbsent=true"
        label="Passenger"
        value="2"
        type="passenger"
      />

      {/* Date Field */}
      <FormField
        icon="https://cdn.builder.io/api/v1/image/assets/5ce1241109834c779f0eaf58b7b8f168/5ab362b7f2748de22597b5784bfbda5019ab62e7?placeholderIfAbsent=true"
        label="Date"
        value="2025/3/30"
        type="date"
      />
    </View>
  );
};

const styles = StyleSheet.create({
    formContainer: {
      borderRadius: 34,
      alignSelf: "stretch",
      display: "flex",
      width: "100%",
      paddingLeft: 10,
      paddingRight: 70,
      paddingTop: 13,
      paddingBottom: 13,
      flexDirection: "column",
    },
  });

export default SearchForm;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\styles.js ====
import { StyleSheet } from "react-native";

const styles = {
  inputDesign: StyleSheet.create({
    container: {
      width: "100%",
      display: "flex",
      flexDirection: "column",
      flex: 1,
    },
    contentContainer: {
      width: "100%",
      paddingLeft: 25,
      paddingRight: 25,
      paddingTop: 26,
    },
    logo: {
      width: 327,
      height: 77,
      resizeMode: "contain",
    },
    greeting: {
      marginTop: 23,
      fontFamily: "Nunito",
      fontSize: 20,
      fontWeight: "700",
      color: "#000",
    },
    imageContainer: {
      marginTop: 55,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
    },
    busImage: {
      width: 290,
      height: 157,
      resizeMode: "contain",
    },
    formContainer: {
      marginTop: 20,
      width: "100%",
      backgroundColor: "#F8F7F7",
      borderRadius: 34,
      padding: 36,
    },
    formFields: {
      display: "flex",
      flexDirection: "column",
      gap: 36,
    },
    searchButton: {
      marginTop: 18,
      width: 218,
      height: 61,
      backgroundColor: "#51259B",
      borderRadius: 126,
      justifyContent: "center",
      alignItems: "center",
      alignSelf: "center",
    },
    searchButtonText: {
      color: "#FFF",
      fontFamily: "Nunito",
      fontSize: 24,
      fontWeight: "600",
    },
  }),

  formField: StyleSheet.create({
    container: {
      position: "relative",
      flexDirection: "row",
      alignItems: "flex-start",
    },
    icon: {
      width: 24,
      height: 24,
      marginRight: 10,
      marginTop: 5,
    },
    label: {
      fontFamily: "Nunito",
      fontSize: 22,
      fontWeight: "700",
      color: "#000",
    },
    value: {
      fontFamily: "Nunito",
      fontSize: 20,
      color: "#000",
      marginTop: 12,
    },
    separator: {
      width: 194,
      height: 1,
      marginTop: 1,
      backgroundColor: "#000",
    },
  }),

  bottomNav: StyleSheet.create({
    container: {
      marginTop: "auto",
      borderTopWidth: 1,
      borderColor: "#A39898",
      width: "100%",
    },
    content: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between",
      paddingLeft: 22,
      paddingRight: 22,
      paddingTop: 15,
      paddingBottom: 15,
    },
    icon: {
      width: 48,
      height: 48,
    },
  }),
};

export default styles;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\login\GoogleLoginButton.jsx ====
import React from "react";
import { View, Text, TouchableOpacity, Image, StyleSheet } from "react-native";

const GoogleLoginButton = ({ onPress }) => {
  return (
    <TouchableOpacity style={styles.googleButton} onPress={onPress}>
      <Image
        source={require("../../assets/google-icon.png")}
        style={styles.googleIcon}
        resizeMode="contain"
        accessibilityLabel="Google"
      />
      <View style={styles.textContainer}>
        <Text style={styles.buttonText}>Login with Google</Text>
      </View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  googleButton: {
    width: "100%",
    height: 52,
    borderRadius: 32,
    borderWidth: 1,
    borderColor: "#693BB8",
    backgroundColor: "#F8F7F7",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: 12,
  },
  googleIcon: {
    width: 26,
    height: 26,
  },
  textContainer: {},
  buttonText: {
    color: "#000",
    fontSize: 18,
    fontWeight: "700",
  },
});

export default GoogleLoginButton;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\login\LoginForm.jsx ====
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
} from "react-native";
import { axiosInst } from '../../service/axiosInstance';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation } from "@react-navigation/native";


const LoginForm = () => {
  const navigation = useNavigation();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
      try {
        const response = await axiosInst.post('/user/signin', { email, password });
        const { id, jwt } = response.data;
        print(response.data);
        await AsyncStorage.setItem('jwtToken', jwt);
        await AsyncStorage.setItem('userId', id.toString());
  
        navigation.replace('Home');
      } catch (error) {
        console.error('Login Error:', error);
        alert('Invalid email or password!');
      }
    };

  return (
    <View style={styles.formContainer}>
      <View style={styles.formHeader}>
        <Text style={styles.formTitle}>LOGIN</Text>
      </View>
      <View style={styles.formFields}>
        <EmailField email={email} setEmail={setEmail} />
        <PasswordField password={password} setPassword={setPassword} />
        <LoginButton onPress={handleLogin} />
      </View>
    </View>
  );
};

const EmailField = ({ email, setEmail }) => {
  return (
    <View style={styles.inputGroup}>
      <View style={styles.labelContainer}>
        <Text style={styles.inputLabel}>Email</Text>
      </View>
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.textInput}
          placeholder="test@gmail.com"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          autoCapitalize="none"
        />
      </View>
    </View>
  );
};

const PasswordField = ({ password, setPassword }) => {
  return (
    <View style={styles.inputGroup}>
      <View style={styles.labelContainer}>
        <Text style={styles.inputLabel}>Password</Text>
      </View>
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.textInput}
          value={password}
          onChangeText={setPassword}
          secureTextEntry={true}
        />
      </View>
    </View>
  );
};

const LoginButton = ({ onPress }) => {
  return (
    <TouchableOpacity style={styles.loginButton} onPress={onPress}>
      <Text style={styles.loginButtonText}>Login</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  formContainer: {
    width: "100%",
    maxWidth: 343,
    backgroundColor: "#F8F7F7",
    borderRadius: 32,
    borderWidth: 1,
    borderColor: "#FFF",
    padding: 24,
  },
  formHeader: {
    marginBottom: 24,
  },
  formTitle: {
    color: "#693BB8",
    fontSize: 30,
    fontWeight: "700",
    textAlign: "center",
  },
  formFields: {
    display: "flex",
    flexDirection: "column",
    gap: 24,
  },
  inputGroup: {
    display: "flex",
    flexDirection: "column",
    gap: 8,
  },
  labelContainer: {},
  inputLabel: {
    color: "#000",
    fontSize: 24,
    fontWeight: "700",
  },
  inputContainer: {
    width: "100%",
    height: 54,
    borderRadius: 126,
    borderWidth: 1,
    borderColor: "#693BB8",
    backgroundColor: "#FFFAFA",
    paddingLeft: 20,
    paddingRight: 20,
    display: "flex",
    justifyContent: "center",
  },
  textInput: {
    width: "100%",
    fontSize: 18,
    fontWeight: "300",
  },
  loginButton: {
    width: 186,
    height: 48,
    backgroundColor: "#51259B",
    borderRadius: 126,
    justifyContent: "center",
    alignItems: "center",
    marginLeft: "auto",
    marginRight: "auto",
    marginTop: 24,
  },
  loginButtonText: {
    color: "#FFF",
    fontSize: 24,
    fontWeight: "700",
  },
});

export default LoginForm;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\login\LoginScreen.jsx ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity, Image } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { axiosInst } from '../../service/axiosInstance';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { SafeAreaView } from 'react-native-safe-area-context';
import BackButton from '../../components/BackButton';
import LoginForm from './LoginForm';
import GoogleLoginButton from './GoogleLoginButton';


const LoginScreen = () => {
  const navigation = useNavigation();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');


  return (
    <SafeAreaView style={styles.container}>
    <View style={styles.header}>
      <BackButton />
      <Image
        source={require("../../assets/logo.png")}
        style={styles.logo}
        resizeMode="contain"
        accessibilityLabel="Dimash Bus"
      />
    </View>
    <View style={styles.content}>
      <LoginForm />
      <View style={styles.googleButtonContainer}>
        <GoogleLoginButton />
      </View>
    </View>
  </SafeAreaView>
  );
};

export default LoginScreen;

const styles = StyleSheet.create({
  container: { 
    flex: 1,
    flexDirection: "column",
    fontFamily: "Nunito, sans-serif",
    width: "100%", },
  header: {
    flexDirection: 'row',
    display: "flex",
    alignItems: "center",
    padding: 24,
    gap: 12, },

    logo: {
      alignSelf: "flex-start",
      width: 277,
      height: 65,
    },
    content: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      paddingLeft: 24,
      paddingRight: 24,
    },
    googleButtonContainer: {
      marginTop: 40,
      width: "100%",
      maxWidth: 295,
      alignSelf: "center",
    },


  icon: { width: 100, height: 100, marginRight: 100 },
  headerText: { fontSize: 24, fontWeight: '600' },
  title: { fontSize: 24, fontWeight: '600', color: '#6B21A8', marginBottom: 20 },
  input: {
    borderWidth: 1, borderColor: '#6B21A8', borderRadius: 25,
    paddingHorizontal: 15, paddingVertical: 10, marginBottom: 15,
  },
  button: {
    backgroundColor: '#6B21A8',
    paddingVertical: 14,
    borderRadius: 25,
    alignItems: 'center',
    marginTop: 10,
  },
  buttonText: { color: '#fff', fontSize: 16 },
  googleButton: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#6B21A8',
    borderRadius: 25,
    padding: 10,
    marginTop: 20,
    justifyContent: 'center',
  },
  googleIcon: { width: 20, height: 20, marginRight: 10 },
  googleText: { color: '#000' },
});

{/***
    <View style={styles.container}>
      <View style={styles.header}>
        <BackButton />
        <Image source={require('../../assets/bus-icon.png')} style={styles.icon} />
        <Text style={styles.headerText}>Dimash Bus</Text>
      </View>

      <Text style={styles.title}>LOGIN</Text>

      <TextInput
        style={styles.input}
        placeholder="Email"
        keyboardType="email-address"
        onChangeText={setEmail}
        value={email}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        onChangeText={setPassword}
        value={password}
      />

      <TouchableOpacity style={styles.button} onPress={handleLogin}>
        <Text style={styles.buttonText}>Login</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.googleButton}>
        <Image
          source={require('../../assets/google-icon.png')}
          style={styles.googleIcon}
        />
        <Text style={styles.googleText}>Login with Google</Text>
      </TouchableOpacity>
    </View>***/}


==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\signup\SignupForm.jsx ====
// SignupForm.jsx
import React, { useState } from "react";
import { View, Text, TextInput, TouchableOpacity, StyleSheet } from "react-native";
import { useNavigation } from "@react-navigation/native";
import { axiosInst } from "../../service/axiosInstance";
import AsyncStorage from "@react-native-async-storage/async-storage";

// ВАЖНО: используем поля, аналогичные фронтовой регистрации:
// firstName, lastName, gender, age, mobilenumber, email, password
const SignupForm = () => {
  const navigation = useNavigation();

  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [gender, setGender] = useState("");
  const [age, setAge] = useState("");
  const [mobilenumber, setMobilenumber] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleSignup = async () => {
    try {
      const payload = {
        firstName,
        lastName,
        gender,
        age,
        mobile: mobilenumber,
        email,
        password,
      };

      const response = await axiosInst.post("/user/signup", payload);


      navigation.replace("Login");
    } catch (error) {
      console.error("Signup Error:", error);
      alert("Error signing up. Please try again.");
    }
  };

  return (
    <View style={styles.formContainer}>
      <TextInput
        style={styles.input}
        placeholder="First Name"
        value={firstName}
        onChangeText={setFirstName}
      />
      <TextInput
        style={styles.input}
        placeholder="Last Name"
        value={lastName}
        onChangeText={setLastName}
      />
      <TextInput
        style={styles.input}
        placeholder="Gender"
        value={gender}
        onChangeText={setGender}
      />
      <TextInput
        style={styles.input}
        placeholder="Age"
        keyboardType="numeric"
        value={age}
        onChangeText={setAge}
      />
      <TextInput
        style={styles.input}
        placeholder="Mobile Number"
        keyboardType="phone-pad"
        value={mobilenumber}
        onChangeText={setMobilenumber}
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        keyboardType="email-address"
        value={email}
        onChangeText={setEmail}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        value={password}
        onChangeText={setPassword}
      />

      <TouchableOpacity style={styles.button} onPress={handleSignup}>
        <Text style={styles.buttonText}>Sign up</Text>
      </TouchableOpacity>
    </View>
  );
};

export default SignupForm;

const styles = StyleSheet.create({
  formContainer: {
    width: "100%",
    maxWidth: 295,
    alignSelf: "center",
    marginTop: 20,
  },
  input: {
    borderWidth: 1,
    borderColor: "#6B21A8",
    borderRadius: 25,
    paddingHorizontal: 15,
    paddingVertical: 10,
    marginBottom: 15,
  },
  button: {
    backgroundColor: "#6B21A8",
    paddingVertical: 14,
    borderRadius: 25,
    alignItems: "center",
    marginTop: 10,
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\signup\SignupScreen.js ====
// SignupScreen.jsx
import React from "react";
import { View, Image, StyleSheet } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import BackButton from "../../components/BackButton";
import SignupForm from "./SignupForm";            // <-- Подключаем наш SignupForm
import GoogleLoginButton from "../login/GoogleLoginButton"; // <-- Если нужен Google вход (как в LoginScreen)

const SignupScreen = () => {
  return (
    <SafeAreaView style={styles.container}>
      {/* Header: BackButton + логотип */}
      <View style={styles.header}>
        <BackButton />
        <Image
          source={require("../../assets/logo.png")}
          style={styles.logo}
          resizeMode="contain"
          accessibilityLabel="Dimash Bus"
        />
      </View>

      {/* Контейнер для формы и Google-кнопки */}
      <View style={styles.content}>
        <SignupForm />
        <View style={styles.googleButtonContainer}>
          <GoogleLoginButton />
        </View>
      </View>
    </SafeAreaView>
  );
};

export default SignupScreen;

const styles = StyleSheet.create({
  container: { 
    flex: 1,
    flexDirection: "column",
    fontFamily: "Nunito, sans-serif",
    width: "100%",
  },
  header: {
    flexDirection: "row",
    display: "flex",
    alignItems: "center",
    padding: 24,
    gap: 12,
  },
  logo: {
    alignSelf: "flex-start",
    width: 277,
    height: 65,
  },
  content: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    paddingLeft: 24,
    paddingRight: 24,
  },
  googleButtonContainer: {
    marginTop: 40,
    width: "100%",
    maxWidth: 295,
    alignSelf: "center",
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\service\axiosInstance.js ====
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

const axiosInst = axios.create({
  baseURL: 'https\:\/\/7174-85-117-103-170\.ngrok-free\.app',
  timeout: 10000,
});


axiosInst.interceptors.request.use(
  async (config) => {
    if (config.url.includes('/user/signin') || config.url.includes('/user/signup')) {
      return config; // не добавлять токен при логине
    }
    const token = await AsyncStorage.getItem('jwtToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);


export { axiosInst };



