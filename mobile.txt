==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\.gitignore ====
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\App.js ====
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import AppNavigator from './navigation/AppNavigator';
import { SafeAreaProvider } from 'react-native-safe-area-context';

const App = () => {
  return (
    <SafeAreaProvider>
      
        <AppNavigator />
    </SafeAreaProvider>
  );
};

export default App;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\app.json ====
{
  "expo": {
    "name": "bus-booking-mobile",
    "slug": "bus-booking-mobile",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "favicon": "./assets/favicon.png"
    }
  }
}



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\index.js ====
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);


==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\.expo\devices.json ====
{
  "devices": []
}



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\.expo\README.md ====
> Why do I have a folder named ".expo" in my project?
The ".expo" folder is created when an Expo project is started using "expo start" command.
> What do the files contain?
- "devices.json": contains information about devices that have recently opened this project. This is used to populate the "Development sessions" list in your development builds.
- "settings.json": contains the server configuration that is used to serve the application manifest.
> Should I commit the ".expo" folder?
No, you should not share the ".expo" folder. It does not contain any information that is relevant for other developers working on the project, it is specific to your machine.
Upon project creation, the ".expo" folder is already added to your ".gitignore" file.



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\components\BackButton.jsx ====
import React from "react";
import { Text, TouchableOpacity, StyleSheet } from "react-native";
import { useNavigation } from "@react-navigation/native";

const BackButton = ({ onPress }) => {
  const navigator = useNavigation();

  return (
    <TouchableOpacity style={styles.backButton} onPress={() => navigator.goBack()}>
      <Text style={styles.backButtonText}>←</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  backButton: {
    alignSelf: "flex-start",
  },
  backButtonText: {
    color: "#693BB8",
    fontSize: 36,
    fontWeight: "700",
  },
});

export default BackButton;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\components\BusCard.js ====



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\navigation\AppNavigator.js ====



import React from 'react';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { NavigationContainer } from '@react-navigation/native';

import SplashScreen from '../screens/SplashScreen';
import WelcomeScreen from '../screens/WelcomeScreen';
import LoginScreen from '../screens/login/LoginScreen';
import SignupScreen from '../screens/SignupScreen';
import HomeScreen from '../screens/home/HomeScreen';
import SearchResultScreen from '../screens/SearchResultScreen';
import BusDetailScreen from '../screens/busDetail/BusDetailScreen.jsxn';
import SeatSelectionScreen from '../screens/SeatSelectionScreen';
import PassengerDetailsScreen from '../screens/PassengerDetailsScreen.js';
import PaymentScreen from '../screens/PaymentScreen';
import BookingSummaryScreen from '../screens/BookingSummaryScreen';
import MyBookingsScreen from '../screens/MyBookingsScreen.js';

const Stack = createNativeStackNavigator();

const AppNavigator = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }} >
        <Stack.Screen name="Welcome" component={WelcomeScreen} />
        <Stack.Screen name="Login" component={LoginScreen} />
        <Stack.Screen name="Signup" component={SignupScreen} />
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="SearchResult" component={SearchResultScreen} />
        <Stack.Screen name="BusDetail" component={BusDetailScreen} />
        <Stack.Screen name="SeatSelection" component={SeatSelectionScreen} />
        <Stack.Screen name="BookingSummary" component={BookingSummaryScreen} />
        {/*<Stack.Screen name="PassengerDetails" component={PassengerDetailsScreen} />*/}
        <Stack.Screen name="Payment" component={PaymentScreen} />
        {/*<Stack.Screen name="MyBookings" component={MyBookingsScreen} />*/}
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default AppNavigator;


==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\BookingSummaryScreen.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';

const BookingSummaryScreen = () => {
  const navigation = useNavigation();
  const route = useRoute();

  const {
    busNumber,
    selectedSeats,
    price,
  } = route.params;

  const totalAmount = selectedSeats.length * price;

  return (
    <View style={styles.container}>
      <TouchableOpacity onPress={() => navigation.goBack()}>
        <Text style={styles.back}>←</Text>
      </TouchableOpacity>

      <Text style={styles.title}>Complete Booking</Text>

      <View style={styles.card}>
        <View style={styles.row}>
          <Text style={styles.label}>Ticket:</Text>
          <Text style={styles.value}>{selectedSeats.length} Seats</Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.label}>Bus No:</Text>
          <Text style={styles.value}>{busNumber}</Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.label}>Seat No:</Text>
          <Text style={styles.value}>{selectedSeats.join(' & ')}</Text>
        </View>

        <View style={[styles.row, { marginTop: 20 }]}>
          <Text style={[styles.label, styles.totalLabel]}>Total:</Text>
          <Text style={[styles.totalValue]}>{totalAmount} KZT</Text>
        </View>

        <Text style={styles.perSeat}>Per ticket is {price}</Text>
      </View>

      <TouchableOpacity
        style={styles.payBtn}
        onPress={() => navigation.navigate('Payment', {
          ...route.params,
          totalAmount,
        })}
      >
        <Text style={styles.payBtnText}>Continue to payment</Text>
      </TouchableOpacity>
    </View>
  );
};

export default BookingSummaryScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    backgroundColor: '#fff',
  },
  back: {
    fontSize: 20,
    color: '#6C2BD9',
  },
  title: {
    fontSize: 22,
    fontWeight: '700',
    marginTop: 20,
    marginBottom: 30,
  },
  card: {
    backgroundColor: '#f9f6f6',
    borderRadius: 16,
    padding: 20,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
  },
  label: {
    fontSize: 16,
    color: '#555',
  },
  value: {
    fontSize: 16,
    color: '#222',
    fontWeight: '500',
  },
  totalLabel: {
    fontWeight: '600',
    fontSize: 18,
  },
  totalValue: {
    fontSize: 18,
    fontWeight: '700',
    color: '#6C2BD9',
  },
  perSeat: {
    marginTop: 10,
    color: '#666',
    textAlign: 'right',
    fontSize: 14,
  },
  payBtn: {
    backgroundColor: '#6C2BD9',
    borderRadius: 28,
    paddingVertical: 14,
    marginTop: 40,
    alignItems: 'center',
  },
  payBtnText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\MyBookingsScreen.js ====



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\PassengerDetailsScreen.js ====



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\PaymentScreen.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';

const PaymentScreen = () => {
  const navigation = useNavigation();
  const route = useRoute();

  const { totalAmount } = route.params;

  return (
    <View style={styles.container}>
      <TouchableOpacity onPress={() => navigation.goBack()}>
        <Text style={styles.back}>←</Text>
      </TouchableOpacity>

      <Text style={styles.title}>Payment</Text>

      <View style={styles.summaryCard}>
        <Text style={styles.label}>Total Payment:</Text>
        <Text style={styles.amount}>{totalAmount} KZT</Text>
        <Text style={styles.note}>please select one of the payment method below</Text>
      </View>

      <Text style={styles.paymentLabel}>Payment Method</Text>

      {/* Credit Card */}
      <TouchableOpacity style={styles.paymentOption}>
        <View style={styles.row}>
          <Text style={styles.paymentTitle}>Credit Card</Text>
          <Text style={styles.select}>SELECT</Text>
        </View>
        <View style={styles.iconsRow}>
          <Image source={require('../assets/mastercard.png')} style={styles.icon} />
          <Image source={require('../assets/amex.png')} style={styles.icon} />
          <Image source={require('../assets/visa.png')} style={styles.icon} />
        </View>
      </TouchableOpacity>

      {/* Bank Transfer */}
      <TouchableOpacity style={styles.paymentOption}>
        <View style={styles.row}>
          <Text style={styles.paymentTitle}>Bank Transfer</Text>
          <Text style={styles.select}>SELECT</Text>
        </View>
        <View style={styles.iconsRow}>
          <Image source={require('../assets/googlepay.png')} style={styles.icon} />
          <Image source={require('../assets/card.png')} style={styles.icon} />
        </View>
      </TouchableOpacity>
    </View>
  );
};

export default PaymentScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    backgroundColor: '#f5f5f5',
  },
  back: {
    fontSize: 20,
    color: '#6C2BD9',
  },
  title: {
    fontSize: 22,
    fontWeight: '700',
    marginTop: 20,
    marginBottom: 30,
  },
  summaryCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    color: '#555',
    marginBottom: 4,
  },
  amount: {
    fontSize: 22,
    fontWeight: '700',
    color: '#6C2BD9',
  },
  note: {
    fontSize: 14,
    color: '#888',
    marginTop: 10,
  },
  paymentLabel: {
    fontSize: 18,
    fontWeight: '600',
    marginVertical: 10,
  },
  paymentOption: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  paymentTitle: {
    fontSize: 16,
    fontWeight: '500',
  },
  select: {
    color: '#6C2BD9',
    fontWeight: '600',
  },
  iconsRow: {
    flexDirection: 'row',
    marginTop: 12,
  },
  icon: {
    width: 40,
    height: 28,
    marginRight: 12,
    resizeMode: 'contain',
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\SearchResultScreen.js ====
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  Image,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
} from "react-native";
import { useNavigation, useRoute } from "@react-navigation/native";
import { axiosInst } from "../service/axiosInstance";

const DashedLine = () => (
  <View style={styles.dashedLineContainer}>
    <View style={styles.dashedLine} />
  </View>
);

const LocationSelector = ({ label, location }) => (
  <View style={styles.locationSelectorContainer}>
    <Text style={styles.locationLabel}>{label}</Text>
    <Text style={styles.locationText}>{location}</Text>
  </View>
);

const DateSeatSelector = ({ date, seats }) => (
  <View style={styles.dateSeatContainer}>
    <View style={styles.dateContainer}>
      <Text style={styles.dateText}>{date}</Text>
    </View>
    <View style={styles.seatsContainer}>
      <Text style={styles.seatsText}>{seats} орын</Text>
    </View>
  </View>
);

// Функция форматирования времени
const formatTime = (time) => {
  const date = new Date(time);
  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false });
};

const RouteCard = ({ bus, passengers, onBook }) => (
  <View style={[styles.routeCardContainer, bus.availableSeats > 0 ? styles.activeContainer : styles.inactiveContainer]}>
    <Text style={[styles.busId, bus.availableSeats > 0 ? styles.activeBusId : styles.inactiveBusId]}>{bus.busNo}</Text>

    <View style={styles.timeLocationRow}>
      <Text style={styles.timeText}>{formatTime(bus.startTime)}</Text>
      <DashedLine />
      <Text style={styles.locationText}>Қайдан {bus.from}</Text>
    </View>

    <View style={styles.timeLocationRow}>
      <Text style={styles.timeText}>{formatTime(bus.endTime)}</Text>
      <DashedLine />
      <Text style={styles.locationText}>Қайда {bus.to}</Text>
    </View>

    <View style={styles.footer}>
      <Text style={[styles.priceText, bus.availableSeats > 0 ? styles.activePriceText : styles.inactivePriceText]}>
        {bus.cost} KZT
      </Text>
      <TouchableOpacity
        style={[styles.bookButton, bus.availableSeats > 0 ? styles.activeBookButton : styles.inactiveBookButton]}
        onPress={() => bus.availableSeats > 0 && onBook(bus)}
        disabled={bus.availableSeats <= 0}
      >
        <Text style={styles.bookButtonText}>Брондау</Text>
      </TouchableOpacity>
    </View>
  </View>
);

export default function BusTicketingScreen() {
  const navigation = useNavigation();
  const route = useRoute();
  const { from, to, date, passengers } = route.params;
  const [stationList, setStationList] = useState([]);

  const [buses, setBuses] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchStations();
    fetchBuses();
  }, []);

  const fetchBuses = async () => {
    setLoading(true);
    try {
      const response = await axiosInst.post("/bus/getbuses", { from, to, date });
      setBuses(response.data);
    } catch (error) {
      console.error("Error fetching buses:", error);
      Alert.alert("Error", "Failed to fetch buses");
    } finally {
      setLoading(false);
    }
  };

  const handleBookNow = (bus) => {
    navigation.navigate("BusDetail", {
      id: bus.id
      /*
      busNo: bus.busNo,
      from: bus.from,
      to: bus.to,
      fromTime: bus.startTime,
      toTime: bus.endTime,
      date,
      passengers,
      price: bus.cost,
      availableSeats: bus.availableSeats,
      */
    });
  };

  const fetchStations = async () => {
    try {
      const response = await axiosInst.get("/station/getstations");
      const formattedStations = response.data.map((station) => ({
        label: station.station_name,
        value: station.id.toString(),
      }));
      setStationList(formattedStations);
    } catch (error) {
      console.error("Error fetching stations:", error);
      Alert.alert("Error", "Failed to fetch stations.");
    }
  };

  const getStationName = (id) => {
    const station = stationList.find((station) => station.value === id);
    return station ? station.label : '';
  };

  return (
    <ScrollView style={styles.mainContainer}>
      <View style={styles.content}>
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
            <Text style={styles.backButtonText}>←</Text>
          </TouchableOpacity>
          <Image
            source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/87861c3d98ae6a960d9011197179097ef5e3e27e" }}
            style={styles.logo}
          />
        </View>

        <View style={styles.locationContainer}>
          <LocationSelector label="Қайдан" location={getStationName(from)} />
          <LocationSelector label="Қайда" location={getStationName(to)} />
        </View>

        <DateSeatSelector date={date} seats={passengers} />

        {loading ? (
          <ActivityIndicator size="large" color="#51259B" style={{ marginTop: 40 }} />
        ) : buses.length === 0 ? (
          <Text style={styles.noBusesText}>No buses found</Text>
        ) : (
          buses.map((bus) => (
            <RouteCard key={bus.id} bus={bus} passengers={passengers} onBook={handleBookNow} />
          ))
        )}
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  mainContainer: { flex: 1, backgroundColor: "#EBEAEA" },
  content: { padding: 16 },
  header: { flexDirection: "row", alignItems: "center", marginTop: 32 },
  backButton: { marginRight: 10 },
  backButtonText: { color: "#693BB8", fontSize: 36 },
  logo: { width: 200, height: 60, resizeMode: "contain" },
  locationContainer: { flexDirection: "row", gap: 16, marginTop: 24 },
  locationSelectorContainer: { flex: 1, backgroundColor: "#FAFAFA", borderRadius: 14, padding: 8 },
  locationLabel: { fontSize: 18, fontWeight: "600", color: "#837F7F" },
  locationText: { fontSize: 20, fontWeight: "300", marginTop: 4 },
  dateSeatContainer: { flexDirection: "row", gap: 16, marginTop: 16 },
  dateContainer: { flex: 1, backgroundColor: "#FAFAFA", borderRadius: 17, padding: 8 },
  seatsContainer: { backgroundColor: "#FAFAFA", borderRadius: 17, padding: 8 },
  dateText: { fontSize: 18, fontWeight: "300" },
  seatsText: { color: "#6C6A6A", fontSize: 18, fontWeight: "600" },
  routeCardContainer: { marginTop: 16, borderRadius: 20, padding: 24 },
  activeContainer: { backgroundColor: "#FFFBFB" },
  inactiveContainer: { backgroundColor: "#F8F5F5" },
  busId: { fontSize: 22, fontWeight: "700" },
  activeBusId: { color: "#693BB8" },
  inactiveBusId: { color: "#7C7575" },
  timeLocationRow: { flexDirection: "row", marginTop: 16 },
  timeText: { fontSize: 20, fontWeight: "600", width: 90 },
  footer: { borderTopWidth: 1, borderColor: "#C6BCBC", marginTop: 16, paddingTop: 16, flexDirection: "row", justifyContent: "space-between", alignItems: "center" },
  priceText: { fontSize: 25, fontWeight: "700" },
  activePriceText: { color: "#693BB8" },
  inactivePriceText: { color: "#7C7575" },
  bookButton: { paddingHorizontal: 16, paddingVertical: 8, borderRadius: 15 },
  activeBookButton: { backgroundColor: "#51259B" },
  inactiveBookButton: { backgroundColor: "#B8B5BC" },
  bookButtonText: { color: "#fff", fontSize: 16, fontWeight: "700" },
  dashedLineContainer: { marginHorizontal: 16, height: 57, justifyContent: "center" },
  dashedLine: { height: "100%", width: 1, borderWidth: 1, borderStyle: "dashed", borderColor: "#000" },
  noBusesText: { fontSize: 18, color: "#E74C3C", textAlign: "center", marginTop: 40 },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\SeatSelectionScreen.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';

const totalSeats = 20;
const reservedSeats = [1, 5, 12, 15];

const SeatSelectionScreen = () => {
  const navigation = useNavigation();
  const route = useRoute();

  const { price, passengers } = route.params;

  const [selectedSeats, setSelectedSeats] = useState([]);

  const toggleSeat = (seatNumber) => {
    if (reservedSeats.includes(seatNumber)) return;

    if (selectedSeats.includes(seatNumber)) {
      setSelectedSeats(selectedSeats.filter((n) => n !== seatNumber));
    } else {
      if (selectedSeats.length < passengers) {
        setSelectedSeats([...selectedSeats, seatNumber]);
      }
    }
  };

  const getSeatStatus = (seatNumber) => {
    if (reservedSeats.includes(seatNumber)) return 'reserved';
    if (selectedSeats.includes(seatNumber)) return 'selected';
    return 'available';
  };

  const handleBook = () => {
    navigation.navigate('BookingSummary', {
      ...route.params,
      selectedSeats,
    });
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <TouchableOpacity onPress={() => navigation.goBack()}>
        <Text style={styles.back}>←</Text>
      </TouchableOpacity>

      <Text style={styles.title}>Choose Seat</Text>

      {/* Сетка мест */}
      <View style={styles.seatGrid}>
        {Array.from({ length: totalSeats }).map((_, index) => {
          const seatNumber = index + 1;
          const status = getSeatStatus(seatNumber);

          return (
            <TouchableOpacity
              key={seatNumber}
              style={[
                styles.seat,
                status === 'reserved' && styles.reserved,
                status === 'available' && styles.available,
                status === 'selected' && styles.selected,
              ]}
              onPress={() => toggleSeat(seatNumber)}
              disabled={status === 'reserved'}
            />
          );
        })}
      </View>

      {/* Легенда */}
      <View style={styles.legend}>
        <View style={styles.legendItem}>
          <View style={[styles.circle, styles.reserved]} />
          <Text>Reserved</Text>
        </View>
        <View style={styles.legendItem}>
          <View style={[styles.circle, styles.available]} />
          <Text>Available</Text>
        </View>
        <View style={styles.legendItem}>
          <View style={[styles.circle, styles.selected]} />
          <Text>Selected Seat</Text>
        </View>
      </View>

      <TouchableOpacity
        style={styles.bookBtn}
        onPress={handleBook}
        disabled={selectedSeats.length !== passengers}
      >
        <Text style={styles.bookBtnText}>Book Now</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

export default SeatSelectionScreen;

const styles = StyleSheet.create({
  container: {
    padding: 20,
    paddingBottom: 60,
    backgroundColor: '#fff',
    alignItems: 'center',
  },
  back: {
    alignSelf: 'flex-start',
    fontSize: 20,
    color: '#6C2BD9',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    marginVertical: 20,
  },
  seatGrid: {
    width: '100%',
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  seat: {
    width: '22%',
    aspectRatio: 1,
    borderRadius: 8,
    marginBottom: 16,
  },
  reserved: {
    backgroundColor: '#ccc',
  },
  available: {
    backgroundColor: '#eee',
  },
  selected: {
    backgroundColor: '#6C2BD9',
  },
  legend: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    marginTop: 24,
  },
  legendItem: {
    alignItems: 'center',
  },
  circle: {
    width: 20,
    height: 20,
    borderRadius: 10,
    marginBottom: 6,
  },
  bookBtn: {
    backgroundColor: '#6C2BD9',
    paddingHorizontal: 30,
    paddingVertical: 14,
    borderRadius: 30,
    marginTop: 30,
  },
  bookBtnText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\SignupScreen.js ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity, Image } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { axiosInst } from '../service/axiosInstance';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { SafeAreaView } from 'react-native-safe-area-context';  

const SignupScreen = () => {
  const navigation = useNavigation();
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSignup = async () => {
    try {
      const payload = {
        fullName: name,
        phone,
        email,
        password,
      };
      const response = await axiosInst.post('/user/signup', payload);

      const { jwtToken, userId } = response.data;

      await AsyncStorage.setItem('jwtToken', jwtToken);
      await AsyncStorage.setItem('userId', userId.toString());

      navigation.replace('Home');
    } catch (error) {
      console.error('Signup Error:', error);
      alert('Error signing up. Please try again.');
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Image source={require('../assets/bus-icon.png')} style={styles.icon} />
        <Text style={styles.headerText}>Dimash Bus</Text>
      </View>

      <Text style={styles.title}>SIGNUP</Text>

      <TextInput
        style={styles.input}
        placeholder="Full Name"
        onChangeText={setName}
        value={name}
      />
      <TextInput
        style={styles.input}
        placeholder="Phone number"
        keyboardType="phone-pad"
        onChangeText={setPhone}
        value={phone}
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        keyboardType="email-address"
        onChangeText={setEmail}
        value={email}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        onChangeText={setPassword}
        value={password}
      />

      <TouchableOpacity style={styles.button} onPress={handleSignup}>
        <Text style={styles.buttonText}>Sign up</Text>
      </TouchableOpacity>
    </SafeAreaView>
  );
};

export default SignupScreen;

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', padding: 24 },
  header: { flexDirection: 'row', alignItems: 'center', marginBottom: 30 },
  icon: { width: 40, height: 40, marginRight: 10 },
  headerText: { fontSize: 24, fontWeight: '600' },
  title: { fontSize: 24, fontWeight: '600', color: '#6B21A8', marginBottom: 20 },
  input: {
    borderWidth: 1, borderColor: '#6B21A8', borderRadius: 25,
    paddingHorizontal: 15, paddingVertical: 10, marginBottom: 15,
  },
  button: {
    backgroundColor: '#6B21A8',
    paddingVertical: 14,
    borderRadius: 25,
    alignItems: 'center',
    marginTop: 10,
  },
  buttonText: { color: '#fff', fontSize: 16 },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\SplashScreen.js ====
import React, { useEffect } from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { useNavigation } from '@react-navigation/native';

const SplashScreen = () => {
  const navigation = useNavigation();

  useEffect(() => {
    const timer = setTimeout(() => {
      navigation.replace('Welcome');
    }, 2000);
    return () => clearTimeout(timer);
  }, []);

  return (
    <View style={styles.container}>
      <Image source={require('../assets/bus-icon.png')} style={styles.icon} />
      <Text style={styles.title}>Dimash Bus</Text>
      <TouchableOpacity
        style={styles.button}
        onPress={() => navigation.navigate('Welcome')}
      >
        <Text style={styles.buttonText}>Get Started</Text>
      </TouchableOpacity>
    </View>
  );
};

export default SplashScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#fff'
  },
  icon: {
    width: 50,
    height: 50,
    marginBottom: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 40,
  },
  button: {
    backgroundColor: '#5b21b6',
    paddingHorizontal: 40,
    paddingVertical: 12,
    borderRadius: 25,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\WelcomeScreen.js ====
import React from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { useNavigation } from '@react-navigation/native';

const WelcomeScreen = () => {
  const navigation = useNavigation();

  return (
    <View style={styles.container}>
      <Image source={require('../assets/bus-icon.png')} style={styles.icon} />
      <Text style={styles.title}>Dimash Bus</Text>
      <Image source={require('../assets/bus-graphic.jpg')} style={styles.image} />
      <Text style={styles.welcome}>Welcome!</Text>
      <Text style={styles.description}>
        Dimash Bus is an online booking service for bus transportation.
      </Text>
      <View style={styles.buttonsContainer}>
        <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Login')}>
          <Text style={styles.buttonText}>LOGIN</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Signup')}>
          <Text style={styles.buttonText}>SIGNUP</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default WelcomeScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#fff', padding: 20
  },
  icon: {
    width: 50,
    height: 50,
  },
  title: {
    fontSize: 28,
    fontWeight: '600',
    marginTop: 10,
    marginBottom: 20,
  },
  image: {
    width: '100%',
    height: 200,
    resizeMode: 'contain',
    marginVertical: 20,
  },
  welcome: {
    fontSize: 24,
    fontWeight: '600',
  },
  description: {
    fontSize: 16,
    color: '#444',
    textAlign: 'center',
    marginTop: 10,
    marginBottom: 30,
  },
  buttonsContainer: {
    flexDirection: 'row',
    gap: 20,
  },
  button: {
    backgroundColor: '#5b21b6',
    paddingHorizontal: 30,
    paddingVertical: 12,
    borderRadius: 25,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\busDetail\BusDetailScreen.jsx ====
import React from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';

import busImage from '../assets/bus-graphic.jpg'; // большая картинка автобуса
import backArrow from '../assets/back-arrow.png'; // ← кнопка назад

const BusDetailsScreen = () => {
  const navigation = useNavigation();
  const route = useRoute();

  const {
    busNo
  } = route.params;

  const selectedSeats = [8, 9]; // можно будет получать из выбора

  const handleContinue = () => {
    navigation.navigate('BookingSummary', {
      ...route.params,
      selectedSeats,
    });
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {/* Back and bus image */}
      <TouchableOpacity style={styles.backBtn} onPress={() => navigation.goBack()}>
        <Image source={backArrow} style={styles.backIcon} />
      </TouchableOpacity>

      <Image source={busImage} style={styles.busImage} resizeMode="contain" />

      {/* Bus number */}
      <Text style={styles.busNo}>{busNo}</Text>

      {/* Date */}
      <Text style={styles.dateText}>{date}</Text>

      {/* Direction Info */}
      <View style={styles.routeBox}>
        <View style={styles.routeText}>
          <Text style={styles.location}>{from}</Text>
          <Text style={styles.time}>{fromTime}</Text>
        </View>

        <Text style={styles.arrow}>◉──────────◉</Text>

        <View style={styles.routeText}>
          <Text style={styles.location}>{to}</Text>
          <Text style={styles.time}>{toTime}</Text>
        </View>
      </View>

      {/* Seat & Facilities */}
      <View style={styles.infoBox}>
        <Text style={styles.sectionTitle}>Available Seats</Text>
        <Text style={styles.infoText}>12 seats available</Text>
        <Text style={styles.infoText}>2*2 Seat Arrangement</Text>

        <Text style={[styles.sectionTitle, { marginTop: 20 }]}>Facility</Text>
        <Text style={styles.infoText}>- Comfort Seats</Text>
        <Text style={styles.infoText}>- On Time</Text>
        <Text style={styles.infoText}>- Storage Space</Text>
      </View>

      {/* Price & Book */}
      <View style={styles.footer}>
        <Text style={styles.priceText}>
          {passengers} * {price} ={' '}
          <Text style={styles.totalPrice}>{passengers * price} KZT</Text>
        </Text>

        <TouchableOpacity style={styles.bookBtn} onPress={handleContinue}>
          <Text style={styles.bookBtnText}>Book Now</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

export default BusDetailsScreen;

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#fff',
    paddingBottom: 60,
  },
  backBtn: {
    marginBottom: 10,
  },
  backIcon: {
    width: 24,
    height: 24,
    tintColor: '#6C2BD9',
  },
  busImage: {
    width: '100%',
    height: 120,
    marginVertical: 10,
  },
  busNo: {
    fontSize: 18,
    fontWeight: '700',
    color: '#fff',
    backgroundColor: '#6C2BD9',
    paddingVertical: 6,
    textAlign: 'center',
    borderRadius: 20,
  },
  dateText: {
    fontSize: 14,
    color: '#888',
    marginTop: 6,
    textAlign: 'center',
  },
  routeBox: {
    backgroundColor: '#f8f8f8',
    padding: 16,
    borderRadius: 12,
    marginTop: 16,
  },
  routeText: {
    alignItems: 'center',
    marginBottom: 12,
  },
  location: {
    fontSize: 18,
    fontWeight: '600',
    color: '#6C2BD9',
  },
  time: {
    fontSize: 16,
    fontWeight: '500',
    marginTop: 2,
  },
  arrow: {
    fontSize: 20,
    textAlign: 'center',
    marginVertical: 8,
    color: '#444',
  },
  infoBox: {
    marginTop: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '700',
    marginBottom: 6,
  },
  infoText: {
    fontSize: 14,
    marginLeft: 8,
    marginBottom: 4,
  },
  footer: {
    marginTop: 30,
    alignItems: 'center',
  },
  priceText: {
    fontSize: 16,
    marginBottom: 10,
  },
  totalPrice: {
    color: '#6C2BD9',
    fontSize: 18,
    fontWeight: '700',
  },
  bookBtn: {
    backgroundColor: '#6C2BD9',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 30,
  },
  bookBtnText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 16,
  },
});



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\BottomNavigation.jsx ====
import React from "react";
import { View, Image, TouchableOpacity } from "react-native";
import styles from "./styles";

const BottomNavigation = () => {
  return (
    <View style={styles.bottomNav.container}>
      <View style={styles.bottomNav.content}>
        <TouchableOpacity>
          <Image
            source={{
              uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/1489f5ae25c528ba84289d797b44c042d25a9fbb",
            }}
            style={styles.bottomNav.icon}
            accessibilityLabel="Search icon"
          />
        </TouchableOpacity>
        <TouchableOpacity>
          <Image
            source={{
              uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/352c6bde25d6c653cae573f39d2ae9144c9ce3f2",
            }}
            style={styles.bottomNav.icon}
            accessibilityLabel="Menu icon"
          />
        </TouchableOpacity>
        <TouchableOpacity>
          <Image
            source={{
              uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/c145c251432e6a0e1effdab83bd93043b7f8f78e",
            }}
            style={styles.bottomNav.icon}
            accessibilityLabel="User icon"
          />
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default BottomNavigation;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\FormField.jsx ====
import React from "react";
import { View, Text, Image } from "react-native";
import styles from "./styles";

const FormField = ({ iconSource, iconAlt, label, value }) => {
  return (
    <View style={styles.formField.container}>
      <Image
        source={{ uri: iconSource }}
        style={styles.formField.icon}
        accessibilityLabel={iconAlt}
      />
      <View>
        <Text style={styles.formField.label}>{label}</Text>
        <Text style={styles.formField.value}>{value}</Text>
        <View style={styles.formField.separator} />
      </View>
    </View>
  );
};

export default FormField;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\HomeScreen.jsx ====
{/***

import { SafeAreaView } from 'react-native-safe-area-context';
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, TextInput, ActivityIndicator } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { axiosInst } from '../service/axiosInstance';
import DateTimePicker from '@react-native-community/datetimepicker';

const HomeScreen = () => {
  const navigation = useNavigation();

  const [stationList, setStationList] = useState([]);
  const [from, setFrom] = useState('');
  const [to, setTo] = useState('');
  const [date, setDate] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [passengers, setPassengers] = useState('1');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchStations();
  }, []);

  const fetchStations = async () => {
    try {
      const response = await axiosInst.get('/station/getstations');
      setStationList(response.data);
    } catch (error) {
      console.error('Error fetching stations:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = () => {
    if (!from || !to || !date || !passengers) {
      alert('Please fill all fields.');
      return;
    }

    navigation.navigate('SearchResult', {
      from,
      to,
      date: date.toISOString().split('T')[0],
      passengers,
    });
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#6B21A8" />
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
        <Text style={styles.welcome}>Hello,{"\n"}Where are you headed?</Text>

        <View style={styles.card}>
          <Text style={styles.label}>From</Text>
          <TextInput
            style={styles.input}
            placeholder="Departure Station"
            value={from}
            onChangeText={setFrom}
          />

          <Text style={styles.label}>To</Text>
          <TextInput
            style={styles.input}
            placeholder="Destination Station"
            value={to}
            onChangeText={setTo}
          />

          <Text style={styles.label}>Passengers</Text>
          <TextInput
            style={styles.input}
            placeholder="Number of Passengers"
            value={passengers}
            onChangeText={setPassengers}
            keyboardType="numeric"
          />

          <Text style={styles.label}>Date</Text>
          <TouchableOpacity style={styles.datePicker} onPress={() => setShowDatePicker(true)}>
            <Text>{date.toISOString().split('T')[0]}</Text>
          </TouchableOpacity>

          {showDatePicker && (
            <DateTimePicker
              value={date}
              mode="date"
              display="calendar"
              onChange={(event, selectedDate) => {
                setShowDatePicker(false);
                if (selectedDate) setDate(selectedDate);
              }}
            />
          )}
        </View>

        <TouchableOpacity style={styles.searchBtn} onPress={handleSearch}>
          <Text style={styles.searchText}>Search</Text>
        </TouchableOpacity>
      
    </SafeAreaView>
  );
};

export default HomeScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 50,
    backgroundColor: '#fff',
  },
  welcome: {
    fontSize: 22,
    fontWeight: '600',
    marginVertical: 20,
    color: '#333',
  },
  card: {
    backgroundColor: '#f8f8f8',
    padding: 16,
    borderRadius: 12,
    elevation: 2,
    marginTop: 10,
  },
  label: {
    fontWeight: '600',
    marginTop: 12,
    marginBottom: 6,
    color: '#6B21A8',
  },
  input: {
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  datePicker: {
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 14,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  searchBtn: {
    backgroundColor: '#6B21A8',
    marginTop: 20,
    paddingVertical: 14,
    borderRadius: 30,
    alignItems: 'center',
  },
  searchText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
});

***/}

{/*** 
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, TextInput, ActivityIndicator, Platform, Modal, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { axiosInst } from '../../service/axiosInstance';
import DateTimePicker from '@react-native-community/datetimepicker';
import { SafeAreaView } from 'react-native-safe-area-context';

const HomeScreen = () => {
  const navigation = useNavigation();

  const [stationList, setStationList] = useState([]);
  const [from, setFrom] = useState('');
  const [to, setTo] = useState('');
  const [date, setDate] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [passengers, setPassengers] = useState('1');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchStations();
  }, []);

  const fetchStations = async () => {
    try {
      const response = await axiosInst.get('/station/getstations');
      setStationList(response.data);
    } catch (error) {
      console.error('Error fetching stations:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = () => {
    if (!from || !to || !date || !passengers) {
      alert('Please fill all fields.');
      return;
    }

    navigation.navigate('SearchResult', {
      from,
      to,
      date: date.toISOString().split('T')[0],
      passengers,
    });
  };

  const onDateChange = (event, selectedDate) => {
    setShowDatePicker(Platform.OS === 'ios');
    if (selectedDate) {
      setDate(selectedDate);
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#6B21A8" />
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.welcome}>Hello,{"\n"}Where are you headed?</Text>

      <View style={styles.card}>
        <Text style={styles.label}>From</Text>
        <TextInput
          style={styles.input}
          placeholder="Departure Station"
          value={from}
          onChangeText={setFrom}
        />

        <Text style={styles.label}>To</Text>
        <TextInput
          style={styles.input}
          placeholder="Destination Station"
          value={to}
          onChangeText={setTo}
        />

        <Text style={styles.label}>Passengers</Text>
        <TextInput
          style={styles.input}
          placeholder="Number of Passengers"
          value={passengers}
          onChangeText={setPassengers}
          keyboardType="numeric"
        />

        <Text style={styles.label}>Date</Text>
        <TouchableOpacity style={styles.datePicker} onPress={() => setShowDatePicker(true)}>
          <Text>{date.toISOString().split('T')[0]}</Text>
        </TouchableOpacity>

        {showDatePicker && (
          <DateTimePicker
            value={date}
            mode="date"
            display={Platform.OS === 'ios' ? 'inline' : 'calendar'}
            onChange={onDateChange}
          />
        )}

        {Platform.OS === 'ios' && showDatePicker && (
          <Modal transparent={true}>
            <View style={styles.modalBackground}>
              <View style={styles.modalContainer}>
                <DateTimePicker
                  value={date}
                  mode="date"
                  display="inline"
                  onChange={onDateChange}
                />
                <Button title="Done" onPress={() => setShowDatePicker(false)} />
              </View>
            </View>
          </Modal>
        )}
      </View>

      <TouchableOpacity style={styles.searchBtn} onPress={handleSearch}>
        <Text style={styles.searchText}>Search</Text>
      </TouchableOpacity>
    </SafeAreaView>
  );
};

export default HomeScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 50,
    backgroundColor: '#fff',
  },
  welcome: {
    fontSize: 22,
    fontWeight: '600',
    marginVertical: 20,
    color: '#333',
  },
  card: {
    backgroundColor: '#f8f8f8',
    padding: 16,
    borderRadius: 12,
    elevation: 2,
    marginTop: 10,
  },
  label: {
    fontWeight: '600',
    marginTop: 12,
    marginBottom: 6,
    color: '#6B21A8',
  },
  input: {
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  datePicker: {
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 14,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  searchBtn: {
    backgroundColor: '#6B21A8',
    marginTop: 20,
    paddingVertical: 14,
    borderRadius: 30,
    alignItems: 'center',
  },
  searchText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  modalBackground: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
  },
  modalContainer: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    alignItems: 'center',
  },
});***/} 
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  RefreshControl,
  Alert,
  Platform,
  TextInput,
} from "react-native";
import DateTimePicker from "@react-native-community/datetimepicker";
import DropDownPicker from "react-native-dropdown-picker";
import BottomNavigation from "./BottomNavigation";
import styles from "./styles";
import { axiosInst } from "../../service/axiosInstance";
import { useNavigation } from "@react-navigation/native";
import FormField from "./FormField";
const HomeScreen = () => {
  const navigation = useNavigation();

  const [stationList, setStationList] = useState([]);
  const [refreshing, setRefreshing] = useState(false);

  const [from, setFrom] = useState(null);
  const [to, setTo] = useState(null);
  const [date, setDate] = useState(new Date());
  const [passengers, setPassengers] = useState('1');

  const [openFrom, setOpenFrom] = useState(false);
  const [openTo, setOpenTo] = useState(false);

  const [showDatePicker, setShowDatePicker] = useState(false);

  const fetchStations = async () => {
    try {
      const response = await axiosInst.get("/station/getstations");
      const formattedStations = response.data.map((station) => ({
        label: station.station_name,
        value: station.id.toString(),
      }));
      setStationList(formattedStations);
    } catch (error) {
      console.error("Error fetching stations:", error);
      Alert.alert("Error", "Failed to fetch stations.");
    }
  };

  useEffect(() => {
    fetchStations();
  }, []);

  const onRefresh = async () => {
    setRefreshing(true);
    await fetchStations();
    setRefreshing(false);
  };

  const handleSearch = async () => {
    if (!from || !to || !date || !passengers) {
      Alert.alert("Error", "Please fill all fields.");
      return;
    }

    try {
      const requestBody = {
        from,
        to,
        date: date.toISOString().split("T")[0],
      };

      const response = await axiosInst.post("/bus/getbuses", requestBody);

      if (response.data.length === 0) {
        Alert.alert("Info", "No buses found.");
      } else {
        navigation.navigate("SearchResult", {
          buses: response.data,
          from,
          to,
          date: requestBody.date,
          passengers,
        });
      }
    } catch (error) {
      console.error("Error fetching buses:", error);
      Alert.alert("Error", "Failed to fetch buses.");
    }
  };

  const onDateChange = (event, selectedDate) => {
    setShowDatePicker(Platform.OS === "ios");
    if (selectedDate) setDate(selectedDate);
  };

  return (
    <View style={styles.inputDesign.container}>
      <ScrollView
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        <View style={styles.inputDesign.contentContainer}>
          <Image
            source={{
              uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/e091fec5c4eed24f793836fbe8901082aee55a25",
            }}
            style={styles.inputDesign.logo}
          />

          <Text style={styles.inputDesign.greeting}>
            Hello, Test. Looking for a bus?
          </Text>

          <Image
            source={{
              uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/6eef6d95fbad99a7eae867a2e51523bd9831cdee",
            }}
            style={styles.inputDesign.busImage}
          />
        
          <View style={styles.inputDesign.formContainer}>
              
          <View style={styles.formField.container}>
            <Image
              source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/ee5bc20453cdd8e0519eae1058baa51f54c07cbe" }}
              style={styles.formField.icon}
              accessibilityLabel={"Location icon"}
            />
            <View>
              <Text style={styles.formField.label}>{"Қайдан"}</Text>
                <DropDownPicker
                open={openFrom}
                setOpen={setOpenFrom}
                items={stationList}
                value={from}
                setValue={setFrom}
                placeholder="From"
                zIndex={2000}
                style={styles.formField.value}
              />
              <View style={styles.formField.separator} />
            </View>
            </View> 



            <View style={styles.formField.container}>
            <Image
              source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/ee5bc20453cdd8e0519eae1058baa51f54c07cbe" }}
              style={styles.formField.icon}
              accessibilityLabel={"Select icon"}
            />
            <View>
              <Text style={styles.formField.label}>{"Қайда"}</Text>
              <DropDownPicker
              open={openTo}
              setOpen={setOpenTo}
              items={stationList.filter((item) => item.value !== from)}
              value={to}
              setValue={setTo}
              placeholder="To"
              zIndex={1000}
              style={{ marginBottom: 15 }}
            />

              <View style={styles.formField.separator} />
            </View>
            </View>
            
            <View style={styles.formField.container}>
              <Image
                source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/d987f8fb233906f224470ffb2d833bdbde0d4937" }}
                style={styles.formField.icon}
                accessibilityLabel={"Users icon"}
              />
              <View>
                <Text style={styles.formField.label}>{"Жолаушы саны"}</Text>
                <TextInput style={styles.formField.value}  onChangeText={setPassengers} value={passengers}>{''}</TextInput>
                <View style={styles.formField.separator} />
              </View>
            </View>

            <View style={styles.formField.container}>
              <Image
                source={{ uri: "https://cdn.builder.io/api/v1/image/assets/TEMP/5569f14e094e429e15972615346e358ec68dad64" }}
                style={styles.formField.icon}
                accessibilityLabel={"Calendar icon"}
              />
              <View>
                <Text style={styles.formField.label}>{"Күн"}</Text>
                <DateTimePicker
                value={date}
                mode="date"
                display="default"
                onChange={onDateChange}
                style={styles.formField.value}
              />
                <View style={styles.formField.separator} />
              </View>
            </View>
            
           

            <TouchableOpacity
              style={styles.inputDesign.searchButton}
              onPress={handleSearch}
            >
              <Text style={styles.inputDesign.searchButtonText}>Search</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>

      <BottomNavigation />
    </View>
  );
};

export default HomeScreen;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\SearchButton.jsx ====
import * as React from "react";
import { Text, TouchableOpacity, StyleSheet } from "react-native";

const SearchButton = () => {
  return (
    <TouchableOpacity style={styles.searchButton}>
      <Text style={styles.searchButtonText}>Search</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
    searchButton: {
      borderRadius: 126,
      marginTop: 18,
      width: 218,
      maxWidth: "100%",
      paddingLeft: 70,
      paddingRight: 70,
      paddingTop: 15,
      paddingBottom: 29,
      backgroundColor: "#007AFF", // Added background color for the button
    },
    searchButtonText: {
      fontFamily: "Nunito",
      fontSize: 24,
      color: "rgba(255, 255, 255, 1)",
      fontWeight: "600",
      textAlign: "center",
    },
  });

export default SearchButton;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\SearchForm.jsx ====
import * as React from "react";
import { View, StyleSheet } from "react-native";
import FormField from "./FormField";

const SearchForm = () => {
  return (
    <View style={styles.formContainer}>
      {/* From Field */}
      <FormField
        icon="https://cdn.builder.io/api/v1/image/assets/5ce1241109834c779f0eaf58b7b8f168/57c293f765cba9bdb381ef27296df51340eead40?placeholderIfAbsent=true"
        label="From"
        value="Алматы"
        type="from"
      />

      {/* To Field */}
      <FormField
        icon="https://cdn.builder.io/api/v1/image/assets/5ce1241109834c779f0eaf58b7b8f168/aa67d8b0d303bb8511b477c4b0ad95b6f3f0a0dc?placeholderIfAbsent=true"
        label="To"
        value="Каскелен"
        type="to"
        hasConnector={true}
      />

      {/* Passenger Field */}
      <FormField
        icon="https://cdn.builder.io/api/v1/image/assets/5ce1241109834c779f0eaf58b7b8f168/235f057519eaaef785513c0b353b55ecf8ba0bd0?placeholderIfAbsent=true"
        label="Passenger"
        value="2"
        type="passenger"
      />

      {/* Date Field */}
      <FormField
        icon="https://cdn.builder.io/api/v1/image/assets/5ce1241109834c779f0eaf58b7b8f168/5ab362b7f2748de22597b5784bfbda5019ab62e7?placeholderIfAbsent=true"
        label="Date"
        value="2025/3/30"
        type="date"
      />
    </View>
  );
};

const styles = StyleSheet.create({
    formContainer: {
      borderRadius: 34,
      alignSelf: "stretch",
      display: "flex",
      width: "100%",
      paddingLeft: 10,
      paddingRight: 70,
      paddingTop: 13,
      paddingBottom: 13,
      flexDirection: "column",
    },
  });

export default SearchForm;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\home\styles.js ====
import { StyleSheet } from "react-native";

const styles = {
  inputDesign: StyleSheet.create({
    container: {
      width: "100%",
      display: "flex",
      flexDirection: "column",
      flex: 1,
    },
    contentContainer: {
      width: "100%",
      paddingLeft: 25,
      paddingRight: 25,
      paddingTop: 26,
    },
    logo: {
      width: 327,
      height: 77,
      resizeMode: "contain",
    },
    greeting: {
      marginTop: 23,
      fontFamily: "Nunito",
      fontSize: 20,
      fontWeight: "700",
      color: "#000",
    },
    imageContainer: {
      marginTop: 55,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
    },
    busImage: {
      width: 290,
      height: 157,
      resizeMode: "contain",
    },
    formContainer: {
      marginTop: 20,
      width: "100%",
      backgroundColor: "#F8F7F7",
      borderRadius: 34,
      padding: 36,
    },
    formFields: {
      display: "flex",
      flexDirection: "column",
      gap: 36,
    },
    searchButton: {
      marginTop: 18,
      width: 218,
      height: 61,
      backgroundColor: "#51259B",
      borderRadius: 126,
      justifyContent: "center",
      alignItems: "center",
      alignSelf: "center",
    },
    searchButtonText: {
      color: "#FFF",
      fontFamily: "Nunito",
      fontSize: 24,
      fontWeight: "600",
    },
  }),

  formField: StyleSheet.create({
    container: {
      position: "relative",
      flexDirection: "row",
      alignItems: "flex-start",
    },
    icon: {
      width: 24,
      height: 24,
      marginRight: 10,
      marginTop: 5,
    },
    label: {
      fontFamily: "Nunito",
      fontSize: 22,
      fontWeight: "700",
      color: "#000",
    },
    value: {
      fontFamily: "Nunito",
      fontSize: 20,
      color: "#000",
      marginTop: 12,
    },
    separator: {
      width: 194,
      height: 1,
      marginTop: 1,
      backgroundColor: "#000",
    },
  }),

  bottomNav: StyleSheet.create({
    container: {
      marginTop: "auto",
      borderTopWidth: 1,
      borderColor: "#A39898",
      width: "100%",
    },
    content: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between",
      paddingLeft: 22,
      paddingRight: 22,
      paddingTop: 15,
      paddingBottom: 15,
    },
    icon: {
      width: 48,
      height: 48,
    },
  }),
};

export default styles;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\login\GoogleLoginButton.jsx ====
import React from "react";
import { View, Text, TouchableOpacity, Image, StyleSheet } from "react-native";

const GoogleLoginButton = ({ onPress }) => {
  return (
    <TouchableOpacity style={styles.googleButton} onPress={onPress}>
      <Image
        source={require("../../assets/google-icon.png")}
        style={styles.googleIcon}
        resizeMode="contain"
        accessibilityLabel="Google"
      />
      <View style={styles.textContainer}>
        <Text style={styles.buttonText}>Login with Google</Text>
      </View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  googleButton: {
    width: "100%",
    height: 52,
    borderRadius: 32,
    borderWidth: 1,
    borderColor: "#693BB8",
    backgroundColor: "#F8F7F7",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: 12,
  },
  googleIcon: {
    width: 26,
    height: 26,
  },
  textContainer: {},
  buttonText: {
    color: "#000",
    fontSize: 18,
    fontWeight: "700",
  },
});

export default GoogleLoginButton;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\login\LoginForm.jsx ====
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
} from "react-native";
import { axiosInst } from '../../service/axiosInstance';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation } from "@react-navigation/native";


const LoginForm = () => {
  const navigation = useNavigation();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
      try {
        const response = await axiosInst.post('/user/signin', { email, password });
        const { id, jwt } = response.data;
        print(response.data);
        await AsyncStorage.setItem('jwtToken', jwt);
        await AsyncStorage.setItem('userId', id.toString());
  
        navigation.replace('Home');
      } catch (error) {
        console.error('Login Error:', error);
        alert('Invalid email or password!');
      }
    };

  return (
    <View style={styles.formContainer}>
      <View style={styles.formHeader}>
        <Text style={styles.formTitle}>LOGIN</Text>
      </View>
      <View style={styles.formFields}>
        <EmailField email={email} setEmail={setEmail} />
        <PasswordField password={password} setPassword={setPassword} />
        <LoginButton onPress={handleLogin} />
      </View>
    </View>
  );
};

const EmailField = ({ email, setEmail }) => {
  return (
    <View style={styles.inputGroup}>
      <View style={styles.labelContainer}>
        <Text style={styles.inputLabel}>Email</Text>
      </View>
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.textInput}
          placeholder="test@gmail.com"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          autoCapitalize="none"
        />
      </View>
    </View>
  );
};

const PasswordField = ({ password, setPassword }) => {
  return (
    <View style={styles.inputGroup}>
      <View style={styles.labelContainer}>
        <Text style={styles.inputLabel}>Password</Text>
      </View>
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.textInput}
          value={password}
          onChangeText={setPassword}
          secureTextEntry={true}
        />
      </View>
    </View>
  );
};

const LoginButton = ({ onPress }) => {
  return (
    <TouchableOpacity style={styles.loginButton} onPress={onPress}>
      <Text style={styles.loginButtonText}>Login</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  formContainer: {
    width: "100%",
    maxWidth: 343,
    backgroundColor: "#F8F7F7",
    borderRadius: 32,
    borderWidth: 1,
    borderColor: "#FFF",
    padding: 24,
  },
  formHeader: {
    marginBottom: 24,
  },
  formTitle: {
    color: "#693BB8",
    fontSize: 30,
    fontWeight: "700",
    textAlign: "center",
  },
  formFields: {
    display: "flex",
    flexDirection: "column",
    gap: 24,
  },
  inputGroup: {
    display: "flex",
    flexDirection: "column",
    gap: 8,
  },
  labelContainer: {},
  inputLabel: {
    color: "#000",
    fontSize: 24,
    fontWeight: "700",
  },
  inputContainer: {
    width: "100%",
    height: 54,
    borderRadius: 126,
    borderWidth: 1,
    borderColor: "#693BB8",
    backgroundColor: "#FFFAFA",
    paddingLeft: 20,
    paddingRight: 20,
    display: "flex",
    justifyContent: "center",
  },
  textInput: {
    width: "100%",
    fontSize: 18,
    fontWeight: "300",
  },
  loginButton: {
    width: 186,
    height: 48,
    backgroundColor: "#51259B",
    borderRadius: 126,
    justifyContent: "center",
    alignItems: "center",
    marginLeft: "auto",
    marginRight: "auto",
    marginTop: 24,
  },
  loginButtonText: {
    color: "#FFF",
    fontSize: 24,
    fontWeight: "700",
  },
});

export default LoginForm;



==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\screens\login\LoginScreen.jsx ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity, Image } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { axiosInst } from '../../service/axiosInstance';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { SafeAreaView } from 'react-native-safe-area-context';
import BackButton from '../../components/BackButton';
import LoginForm from './LoginForm';
import GoogleLoginButton from './GoogleLoginButton';


const LoginScreen = () => {
  const navigation = useNavigation();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');


  return (
    <SafeAreaView style={styles.container}>
    <View style={styles.header}>
      <BackButton />
      <Image
        source={require("../../assets/bus-icon.png")}
        style={styles.logo}
        resizeMode="contain"
        accessibilityLabel="Dimash Bus"
      />
    </View>
    <View style={styles.content}>
      <LoginForm />
      <View style={styles.googleButtonContainer}>
        <GoogleLoginButton />
      </View>
    </View>
  </SafeAreaView>
  );
};

export default LoginScreen;

const styles = StyleSheet.create({
  container: { 
    flex: 1,
    flexDirection: "column",
    fontFamily: "Nunito, sans-serif",
    width: "100%", },
  header: {
    display: "flex",
    alignItems: "center",
    padding: 24,
    gap: 12, },

    logo: {
      width: 277,
      height: 65,
    },
    content: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      paddingLeft: 24,
      paddingRight: 24,
    },
    googleButtonContainer: {
      marginTop: 40,
      width: "100%",
      maxWidth: 295,
      alignSelf: "center",
    },


  icon: { width: 100, height: 100, marginRight: 100 },
  headerText: { fontSize: 24, fontWeight: '600' },
  title: { fontSize: 24, fontWeight: '600', color: '#6B21A8', marginBottom: 20 },
  input: {
    borderWidth: 1, borderColor: '#6B21A8', borderRadius: 25,
    paddingHorizontal: 15, paddingVertical: 10, marginBottom: 15,
  },
  button: {
    backgroundColor: '#6B21A8',
    paddingVertical: 14,
    borderRadius: 25,
    alignItems: 'center',
    marginTop: 10,
  },
  buttonText: { color: '#fff', fontSize: 16 },
  googleButton: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#6B21A8',
    borderRadius: 25,
    padding: 10,
    marginTop: 20,
    justifyContent: 'center',
  },
  googleIcon: { width: 20, height: 20, marginRight: 10 },
  googleText: { color: '#000' },
});

{/***
    <View style={styles.container}>
      <View style={styles.header}>
        <BackButton />
        <Image source={require('../../assets/bus-icon.png')} style={styles.icon} />
        <Text style={styles.headerText}>Dimash Bus</Text>
      </View>

      <Text style={styles.title}>LOGIN</Text>

      <TextInput
        style={styles.input}
        placeholder="Email"
        keyboardType="email-address"
        onChangeText={setEmail}
        value={email}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        onChangeText={setPassword}
        value={password}
      />

      <TouchableOpacity style={styles.button} onPress={handleLogin}>
        <Text style={styles.buttonText}>Login</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.googleButton}>
        <Image
          source={require('../../assets/google-icon.png')}
          style={styles.googleIcon}
        />
        <Text style={styles.googleText}>Login with Google</Text>
      </TouchableOpacity>
    </View>***/}


==== C:\Users\Admin\Desktop\buuss\test3\bus-booking-mobile\service\axiosInstance.js ====
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

const axiosInst = axios.create({
  baseURL: 'https\:\/\/ff40-176-64-26-145.ngrok-free\.ngrok-free\.app',
  timeout: 10000,
});

axiosInst.interceptors.request.use(
  async (config) => {
    const token = await AsyncStorage.getItem('jwtToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

export { axiosInst };



